{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/giteement/gitee.oauthcallback.js","path":"giteement/gitee.oauthcallback.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/giteement/giteement.css","path":"giteement/giteement.css","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/giteement/giteement.min.js","path":"giteement/giteement.min.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.eot","path":"css/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.svg","path":"css/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.ttf","path":"css/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.woff","path":"css/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.woff2","path":"css/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/images/alipay-pay.jpg","path":"css/images/alipay-pay.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/images/banner-dark.jpg","path":"css/images/banner-dark.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/images/wechat-pay.jpg","path":"css/images/wechat-pay.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/localshare/css/share.styl","path":"localshare/css/share.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.eot","path":"localshare/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.svg","path":"localshare/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.woff","path":"localshare/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.ttf","path":"localshare/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/localshare/js/qrcode.js","path":"localshare/js/qrcode.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/localshare/js/social-share.js","path":"localshare/js/social-share.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/gopher.png","path":"gopher.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/images/redpanda.png","path":"css/images/redpanda.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/SSH.md","hash":"885bb35cb7bd45411f7f2d2ae652f3673011af14","modified":1700632394954},{"_id":"source/_posts/WSL.md","hash":"f971820fdd7e83a84fd16d4f9826e48e616fbb56","modified":1700623553042},{"_id":"source/about/index.md","hash":"5d1dd0cf6320f322ccc484b47b9e673335dbd03a","modified":1700471798608},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1700470834079},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1700470834742},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1700470834814},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1700470834738},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1700470834418},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1700470834492},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1700470834591},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1700470834611},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1700470834583},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1700470834619},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1700470834651},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1700470834818},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1700470834822},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1700470834826},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1700470834826},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1700470834838},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1700470834830},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1700470834834},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1700470834842},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1700470834842},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1700470834846},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1700470834850},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1700470834850},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1700470834854},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1700470834858},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1700470834854},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1700470834862},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1700470834866},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1700470834862},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1700470834870},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1700470834874},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1700470834870},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1700470834874},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1700470834878},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1700470834878},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1700470834882},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1700470834890},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1700470834886},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1700470834894},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1700470834890},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1700470834894},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1700470834898},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1700470834898},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1700470834704},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1700470834243},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1700470834300},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1700470834334},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1700470834546},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1700470834440},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1700470834522},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1700470834567},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1700470834599},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1700470834555},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1700470834575},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1700470834631},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1700470834382},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1700470834476},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1700470834627},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1700470834655},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1700470834647},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1700470834750},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1700470834754},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1700470834810},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1700470834139},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1700470834734},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1700470834508},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1700470834535},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1700470834463},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1700470834639},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1700470834607},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1700470834663},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1700470834766},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1700470834762},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1700470834770},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1700470834774},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1700470834790},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1700470834786},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1700470834798},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1700470834802},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1700470834798},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1700470834806},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1700470834782},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1700470834794},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1700470834726},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1700470834720},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1700470834698},{"_id":"themes/BlueLake/.gitignore","hash":"49f574312f050162fef2ac80f72b5a9c136c62a8","modified":1700465542305},{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1700465542305},{"_id":"themes/BlueLake/_config.yml","hash":"b771074ae0da43baa0bade0bc6dda8cca442a802","modified":1700645869408},{"_id":"themes/BlueLake/README.md","hash":"40257843a1c8101428385e5238f96515450a222f","modified":1700465542305},{"_id":"themes/BlueLake/package.json","hash":"d8780159f11aac366285889372ccdb007095da07","modified":1700465542321},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"12d3ec934c9afa32aef174c6c7113e605a3a0b39","modified":1700465542305},{"_id":"themes/BlueLake/languages/en.yml","hash":"96f429d32c0857e956aebfe0c28883afd9163a49","modified":1700465542309},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"e28a412b9b98e74bdf79b77f244a4c4be412a83a","modified":1700465542309},{"_id":"themes/BlueLake/languages/ko.yml","hash":"dc110fdf5663fe510c30c6b4e6a057726b4841d0","modified":1700465542309},{"_id":"themes/BlueLake/languages/tr.yml","hash":"4f9f0c58d01cb74309c1913b01123aae80c82ec1","modified":1700465542309},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"757b269ca1a9b7b0745c15ece40d4354e4f792dd","modified":1700465542309},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"e52b9716f45bb83e7c06898f7802df8cbed109e3","modified":1700465542309},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"44b818febd84b2a2d07264ad2aa10d6bbad03ab4","modified":1700465542309},{"_id":"themes/BlueLake/source/favicon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1700465542337},{"_id":"themes/BlueLake/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1700465542321},{"_id":"themes/BlueLake/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1700465542321},{"_id":"themes/BlueLake/layout/index.ejs","hash":"e64b89e7c769e9b43cf6dd6d4bdd2f7ba03a4df9","modified":1700472409324},{"_id":"themes/BlueLake/layout/layout.ejs","hash":"0ff64fb4c4ab14af7fe597ea78265d1f09cb11eb","modified":1700465542321},{"_id":"themes/BlueLake/layout/page.ejs","hash":"cc86a83b9edfa0ec21a1d6a1c99e0f772a064ed9","modified":1700465542321},{"_id":"themes/BlueLake/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1700465542321},{"_id":"themes/BlueLake/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1700465542321},{"_id":"themes/BlueLake/source/css/_extend.styl","hash":"64875ec77cc31a1225a5992a5d507bf98be14b04","modified":1700465542321},{"_id":"themes/BlueLake/source/css/style.styl","hash":"60206b021bd3f4364b7376a04bacbcf9ce868029","modified":1700465542333},{"_id":"themes/BlueLake/source/css/_variables.styl","hash":"868e13f24ebbaf99067a18e45f5f58b4b4a5cf8c","modified":1700465542329},{"_id":"themes/BlueLake/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1700465542333},{"_id":"themes/BlueLake/source/giteement/gitee.oauthcallback.js","hash":"e00dcbf30010e33fb6d633dfa09f077b2b33b032","modified":1700465542337},{"_id":"themes/BlueLake/source/giteement/giteement.css","hash":"8e6ee0547d7c3eda5a4b96fefc3b89103dccb9d1","modified":1700465542337},{"_id":"themes/BlueLake/source/js/script.js","hash":"1b05856e32423ad8fc50bc7f4e0aac4ae39f814c","modified":1700465542341},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"ed5f817a6a2eff541e15d85a6dd8a8df83bff334","modified":1700465542341},{"_id":"themes/BlueLake/layout/_partial/about.ejs","hash":"8f5f0c1cd5c8dd83e8de8a6704cb4fc3e75812f7","modified":1700476244380},{"_id":"themes/BlueLake/layout/_partial/after-footer.ejs","hash":"c0b8d95d827c6a797bb4d563506d9cbc9717099b","modified":1700465542309},{"_id":"themes/BlueLake/layout/_partial/archive-post.ejs","hash":"8565a0fcd38eff73af75e80f93f176ab8d9c08b9","modified":1700465542309},{"_id":"themes/BlueLake/layout/_partial/archive.ejs","hash":"4744116ed807129594fbf172b9919a2831070591","modified":1700465542309},{"_id":"themes/BlueLake/layout/_partial/article.ejs","hash":"2bfe0736ab64bcfb9fa66b2d13cfc908cf024809","modified":1700472885764},{"_id":"themes/BlueLake/layout/_partial/commonts-script.ejs","hash":"d019f9f6380076008f58e758f44d8883f8f656bb","modified":1700465542313},{"_id":"themes/BlueLake/layout/_partial/footer.ejs","hash":"3ac0d89d4412548268d00b7c5341a7fb9023ebbb","modified":1700473148570},{"_id":"themes/BlueLake/layout/_partial/baidu-analytics.ejs","hash":"c6c911f0796aaf1cddc7098ee21e5dc6206e1157","modified":1700465542313},{"_id":"themes/BlueLake/layout/_partial/gauges-analytics.ejs","hash":"165008f72ed77f0da879d132563d763369d26472","modified":1700465542313},{"_id":"themes/BlueLake/layout/_partial/google-analytics.ejs","hash":"9fc18f1fd5bec16f8a3d30b0ce38458485c398b3","modified":1700465542313},{"_id":"themes/BlueLake/layout/_partial/head.ejs","hash":"b412b842c97500972642b70131a788aaa823419d","modified":1700465542313},{"_id":"themes/BlueLake/layout/_partial/pagination.ejs","hash":"c6f279e9bf3e20c2990b22ddbcbd3fed27c5b5bb","modified":1700465542313},{"_id":"themes/BlueLake/layout/_partial/header.ejs","hash":"d59761b90a19171084eaf2b47cc01ff43dc05562","modified":1700472195884},{"_id":"themes/BlueLake/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1700465542317},{"_id":"themes/BlueLake/layout/_widget/archive.ejs","hash":"ec2d9bf37b9bb613524b702d49c3234f82cbf96f","modified":1700465542317},{"_id":"themes/BlueLake/layout/_widget/category.ejs","hash":"85d5afdfefb18b2b1a88ef074746cbf109658a6c","modified":1700465542317},{"_id":"themes/BlueLake/layout/_widget/tag.ejs","hash":"feea59d6e9d122895ce3ed2cc4a5ee505e6e336e","modified":1700465542321},{"_id":"themes/BlueLake/layout/_widget/links.ejs","hash":"33909a5d6a800f987eb97678d09d0a16d9a5a7b3","modified":1700465542317},{"_id":"themes/BlueLake/layout/_widget/recent_posts.ejs","hash":"598c278442022a08b8e1809b77714779bb8a0d81","modified":1700465542317},{"_id":"themes/BlueLake/layout/_widget/tagcloud.ejs","hash":"658c68f624bce479a81a2db8b017b14180ce3f8a","modified":1700465542321},{"_id":"themes/BlueLake/source/css/_partial/about.styl","hash":"755c43ef5dde1db35fe05d40b2c20b6e2a52da6e","modified":1700475915726},{"_id":"themes/BlueLake/source/css/_partial/archive.styl","hash":"53c95e8c4e761e45d0c430f8972d1a5c3519b596","modified":1700465542325},{"_id":"themes/BlueLake/source/css/_partial/article.styl","hash":"5a043bf3c4f9a517b8846bb12957c83f68e43d76","modified":1700465542325},{"_id":"themes/BlueLake/source/css/_partial/comment.styl","hash":"38db346eb7f5d6cc1e78b59225bb33ea1ee16baf","modified":1700465542325},{"_id":"themes/BlueLake/source/css/_partial/highlight.styl","hash":"4fd02b470e68f74e3fa5e97092cdc5ea0a2d0199","modified":1700465542325},{"_id":"themes/BlueLake/source/css/_partial/footer.styl","hash":"698afe02aa930fdcc18ef981e0343bb99085dd57","modified":1700465542325},{"_id":"themes/BlueLake/source/css/_partial/iconfont.styl","hash":"fb68b181802859322a938490331017c1ad99f23d","modified":1700465542325},{"_id":"themes/BlueLake/source/css/_partial/pagination.styl","hash":"df15c94b90650f3b7e1018514a98c82575f7de1d","modified":1700465542325},{"_id":"themes/BlueLake/source/css/_partial/header.styl","hash":"68582a0e1c222850f5ffc0a541baa2c717be38a5","modified":1700465542325},{"_id":"themes/BlueLake/source/css/_partial/reward.styl","hash":"e970dff8c3132f061d04bf001aad3e4ef5824599","modified":1700465542325},{"_id":"themes/BlueLake/source/css/_partial/sidebar-aside.styl","hash":"c2320472d5345d99be9850bd8e0dc64dbece6a96","modified":1700465542325},{"_id":"themes/BlueLake/source/css/_partial/sidebar-bottom.styl","hash":"6aab4e0ee81c4407bed9ccb60335d1022f819aca","modified":1700465542325},{"_id":"themes/BlueLake/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1700465542325},{"_id":"themes/BlueLake/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1700465542329},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.eot","hash":"d79ff9e8325c9c0d2db4ee6dadd2f82799169783","modified":1700465542329},{"_id":"themes/BlueLake/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1700465542329},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.svg","hash":"f9d7bf99db7d73faf2fef3891537630ea4f998ae","modified":1700465542329},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.ttf","hash":"655ead66c5702e6e4a214c1473c78e450c49bfd7","modified":1700465542329},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.woff","hash":"29e34038a63a5a810f3af4a9c15dc1476d97fc93","modified":1700465542329},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.woff2","hash":"09f1ae7849a0649f0bb8f46e128c97fcb59e3a4c","modified":1700465542329},{"_id":"themes/BlueLake/source/css/images/alipay-pay.jpg","hash":"c1cdd36471a1197e31ee6309e979d1fb63daeb25","modified":1700465542329},{"_id":"themes/BlueLake/source/css/images/alipay.jpg","hash":"cfafbfa86d3223e5a7aa6025d4e78d26bdcf02af","modified":1700465542333},{"_id":"themes/BlueLake/source/css/images/wechat.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1700465542333},{"_id":"themes/BlueLake/source/css/images/wechat-pay.jpg","hash":"35f0f9859918d7b67d0a3279b110550667d97e8c","modified":1700465542333},{"_id":"themes/BlueLake/source/localshare/css/share.styl","hash":"3a521a56eb06cb0ad08662d5e696c7950f456356","modified":1700465542341},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1700465542341},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1700465542341},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1700465542345},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1700465542345},{"_id":"themes/BlueLake/source/localshare/js/qrcode.js","hash":"962ad9cb87afa140a644178e5f3c53e2514ea1e5","modified":1700465542345},{"_id":"themes/BlueLake/source/localshare/js/social-share.js","hash":"fe73d3b1c63a498f18f885fc83d631c2b63535e7","modified":1700465542345},{"_id":"themes/BlueLake/layout/_partial/post/category.ejs","hash":"d6c174fe0fe9ec611620860f9685415b78cb889a","modified":1700465542313},{"_id":"themes/BlueLake/layout/_partial/post/comments-count.ejs","hash":"e776617c998b8d83987faf3148ae715909c6db62","modified":1700465542313},{"_id":"themes/BlueLake/layout/_partial/post/date.ejs","hash":"603367b4eddaedd0c74fc976ef8a0a0cbfe2fa34","modified":1700465542313},{"_id":"themes/BlueLake/layout/_partial/post/comments.ejs","hash":"8ccf3390fdb05089ea2def9e140ae7ad95236243","modified":1700465542313},{"_id":"themes/BlueLake/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1700465542317},{"_id":"themes/BlueLake/layout/_partial/post/reward.ejs","hash":"1e7e6e5602db81efb6e3d0bd0ee17aa395247075","modified":1700465542317},{"_id":"themes/BlueLake/layout/_partial/post/nav.ejs","hash":"f8054c6ec9d8a2fd48d66c96500639847fe02293","modified":1700465542317},{"_id":"themes/BlueLake/layout/_partial/post/share.ejs","hash":"d862f8a5df4635e570bb8f62c3935c0ae3b7751c","modified":1700465542317},{"_id":"themes/BlueLake/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1700465542317},{"_id":"themes/BlueLake/layout/_partial/post/title.ejs","hash":"dacc884b56f24b31d85936327424b4f9edd9200a","modified":1700465542317},{"_id":"themes/BlueLake/layout/_partial/post/toc.ejs","hash":"1c40a8c5359f555745d78da24c9529cc26580340","modified":1700465542317},{"_id":"themes/BlueLake/layout/_partial/post/views-count.ejs","hash":"088c45b29e4cc040d87571dd525f9c9d1a07adb6","modified":1700465542317},{"_id":"themes/BlueLake/source/fancybox/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1700465542337},{"_id":"themes/BlueLake/source/js/jquery-3.4.1.min.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1700465542341},{"_id":"themes/BlueLake/source/css/images/banner.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1700465542333},{"_id":"themes/BlueLake/source/themeauthor.jpg","hash":"9249ed22939add5e393180338b4fb76bfe88034c","modified":1700465542345},{"_id":"themes/BlueLake/source/css/images/banner-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1700465542333},{"_id":"themes/BlueLake/source/giteement/giteement.min.js","hash":"12ff917ec7d6b89a70356ebe4198bdf82d3a70eb","modified":1700465542341},{"_id":"themes/BlueLake/source/gopher.png","hash":"8c0038f5897f96abf43ae24602c3c2ca49f6d7b8","modified":1700211029784},{"_id":"public/content.json","hash":"29ca2a8144e11237dbcdc6ff85d7c7990ee9fc79","modified":1700724605879},{"_id":"public/about/index.html","hash":"9c77f1baf00bc3ee1be1756c4686438ff0b3a418","modified":1700724605879},{"_id":"public/2023/11/17/WSL.html","hash":"91123caae49de57456e19443ae525db891e15299","modified":1700724605879},{"_id":"public/archives/index.html","hash":"afcc3536da10d9d9deb87988a79d448cec6ed532","modified":1700724605879},{"_id":"public/archives/2023/index.html","hash":"f2611a6919dcc5313080c3da989d35ffd851c259","modified":1700724605879},{"_id":"public/archives/2023/11/index.html","hash":"24c62c2dd9d62f2a2b3559d7ba66cff0739bf02a","modified":1700724605879},{"_id":"public/index.html","hash":"9f403e70bad10687d97ecc99fbb092ce55f70eea","modified":1700724605879},{"_id":"public/categories/网络编程/index.html","hash":"5f9d72c0e54b3ad5442e556162a5b071dd6fd3ae","modified":1700724605879},{"_id":"public/categories/豆知识/index.html","hash":"d03ed956aafc021a8692e75a0af330ccd46eb1fa","modified":1700724605879},{"_id":"public/2023/11/20/SSH.html","hash":"9a2223eef8b1df77894fb6505f4f99cfe3090a0d","modified":1700724605879},{"_id":"public/favicon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1700634528577},{"_id":"public/css/iconfont/iconfont.eot","hash":"d79ff9e8325c9c0d2db4ee6dadd2f82799169783","modified":1700634528577},{"_id":"public/css/iconfont/iconfont.svg","hash":"f9d7bf99db7d73faf2fef3891537630ea4f998ae","modified":1700634528577},{"_id":"public/css/iconfont/iconfont.ttf","hash":"655ead66c5702e6e4a214c1473c78e450c49bfd7","modified":1700634528577},{"_id":"public/css/iconfont/iconfont.woff","hash":"29e34038a63a5a810f3af4a9c15dc1476d97fc93","modified":1700634528577},{"_id":"public/css/images/alipay.jpg","hash":"cfafbfa86d3223e5a7aa6025d4e78d26bdcf02af","modified":1700634528577},{"_id":"public/css/iconfont/iconfont.woff2","hash":"09f1ae7849a0649f0bb8f46e128c97fcb59e3a4c","modified":1700634528577},{"_id":"public/css/images/wechat.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1700634528577},{"_id":"public/css/images/wechat-pay.jpg","hash":"35f0f9859918d7b67d0a3279b110550667d97e8c","modified":1700634528577},{"_id":"public/css/images/alipay-pay.jpg","hash":"c1cdd36471a1197e31ee6309e979d1fb63daeb25","modified":1700634528577},{"_id":"public/localshare/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1700634528577},{"_id":"public/localshare/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1700634528577},{"_id":"public/localshare/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1700634528577},{"_id":"public/localshare/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1700634528577},{"_id":"public/gopher.png","hash":"8c0038f5897f96abf43ae24602c3c2ca49f6d7b8","modified":1700634528577},{"_id":"public/css/images/banner.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1700634528577},{"_id":"public/js/script.js","hash":"b9441363ff8fe829d90295ea947960338a1a020a","modified":1700634528577},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1700634528577},{"_id":"public/giteement/gitee.oauthcallback.js","hash":"f24dc1fd8de0dc44b8d70df83f7c82fd2f3fc710","modified":1700634528577},{"_id":"public/js/search.json.js","hash":"ec601a6db4c68a7d9c2d440951c6e26ebfbc1f3a","modified":1700634528577},{"_id":"public/localshare/css/share.css","hash":"34f53537ebcf2757b35a15a4a9473f2352486372","modified":1700634528577},{"_id":"public/localshare/js/social-share.js","hash":"9bfe34fe7691833e90815c5c862545bde581cf29","modified":1700634528577},{"_id":"public/css/style.css","hash":"d893ebb7450a19eb2fb46ff56df92710714b8bdf","modified":1700634528577},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1700634528577},{"_id":"public/giteement/giteement.css","hash":"887ad901816c2427b1715444f72ae94f6146e9f7","modified":1700634528577},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1700634528577},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1700634528577},{"_id":"public/localshare/js/qrcode.js","hash":"9caa0d9a9ba4409a3f77540a1b15a7617aeb28e8","modified":1700634528577},{"_id":"public/giteement/giteement.min.js","hash":"922687138ef42d0c77ff6a1c6d3d85ab6c743466","modified":1700634528577},{"_id":"public/css/images/banner-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1700634528577},{"_id":"source/_posts/sshInGo.md","hash":"beb91f3c5146fdd901d09030d37a96c8e508d8e4","modified":1700528988348},{"_id":"source/_posts/golangSerial.md","hash":"d6b69325c5905e1b96e67a874bcb48396e013bf3","modified":1700633354125},{"_id":"public/tags/环境配置/index.html","hash":"c1d576773e8ed4511045649e63bff0e74b2b7339","modified":1700724605879},{"_id":"public/tags/Linux/index.html","hash":"c79f28c56f1d0b5a2e6bb6c5a4bbee8253ce8b48","modified":1700724605879},{"_id":"public/tags/SSH/index.html","hash":"a8b672cfea304056545d9d7041e3079876f4c66f","modified":1700724605879},{"_id":"public/tags/golang/index.html","hash":"282172c41c0486dc048aba425e96be79eaeb047e","modified":1700724605879},{"_id":"public/tags/串口通讯/index.html","hash":"8813dd5509df67ec6058ff3bbac0a6fef1fb71e1","modified":1700724605879},{"_id":"public/tags/网络编程/index.html","hash":"6c7d689e4c9054e67f215ff7a5509c9be8c8e351","modified":1700724605879},{"_id":"public/tags/项目实践/index.html","hash":"252d9451303ff414a25c35888fd713ccff17fcbc","modified":1700724605879},{"_id":"public/tags/豆知识/index.html","hash":"7802362624369727e041d2dcdf13376c8ac9fe09","modified":1700724605879},{"_id":"public/2023/11/22/golangSerial.html","hash":"c122ed74c1e1b2416e28dfc0f19a37a2cd32df8e","modified":1700724605879},{"_id":"public/categories/项目实践/index.html","hash":"c1bc5ea0777e94755fc618957b8cc17cbf4e58c2","modified":1700724605879},{"_id":"themes/BlueLake/source/css/images/redpanda.jpg","hash":"99418c1f98aca8ffc9f7c96dc4957d8e5400e48b","modified":1700635240579},{"_id":"themes/BlueLake/source/css/images/redpanda1.jpg","hash":"a5df19b00f4ff4adc7f0f0a267ab1d9223c0054e","modified":1700635658848},{"_id":"themes/BlueLake/source/css/images/1.jpg","hash":"7a14d9ca81c465009f76d0bc1a87ca132c76994d","modified":1700636449931},{"_id":"themes/BlueLake/source/css/images/2.jpg","hash":"7a14d9ca81c465009f76d0bc1a87ca132c76994d","modified":1700636449931},{"_id":"themes/BlueLake/source/css/images/2.png","hash":"269cf64b336cd838a7a864ad7a3791eec06085ef","modified":1700637394448},{"_id":"themes/BlueLake/source/css/images/redpanda.png","hash":"269cf64b336cd838a7a864ad7a3791eec06085ef","modified":1700637394448},{"_id":"source/_posts/SSHInSubSocks.md","hash":"0564e4afce3d176bcdb403102c3d2f89ee3d3648","modified":1700724506359},{"_id":"source/_posts/SSHInSubSocks/wireshark.png","hash":"7c236d52442b1bcb43da0647a81c030a9002b90a","modified":1700724375112},{"_id":"public/2023/11/22/SSHInSubSocks.html","hash":"3b95e8e71fabce59939747566b8a6b2ee1d57f1f","modified":1700724605879},{"_id":"public/2023/11/22/SSHInSubSocks/wireshark.png","hash":"7c236d52442b1bcb43da0647a81c030a9002b90a","modified":1700724605879},{"_id":"public/css/images/redpanda.png","hash":"269cf64b336cd838a7a864ad7a3791eec06085ef","modified":1700724605879}],"Category":[{"name":"网络编程","_id":"clp6pdezj0003ucti4ilsa25t"},{"name":"豆知识","_id":"clp6pdezl0004ucti3t2ueaju"},{"name":"golang","parent":"clp6pdezj0003ucti4ilsa25t","_id":"clp96ptcm0009zkti91v67edw"},{"name":"啊","parent":"clp6pdezj0003ucti4ilsa25t","_id":"clp96r628000dzkti0dlr836e"},{"name":"啊","_id":"clp96rawh000fzkti3x7zgvzo"},{"name":"网络编程","parent":"clp96rawh000fzkti3x7zgvzo","_id":"clp96rawi000gzkti64angz85"},{"name":"项目实践","_id":"clp96xvvy000kzkti1be0gfpj"}],"Data":[],"Page":[{"title":"about","date":"2023-11-20T08:16:50.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-11-20 16:16:50\n---\n","updated":"2023-11-20T09:41:53.235Z","path":"about/index.html","_id":"clp6pdezd0000uctidjw36r7t","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"SSH握手过程","date":"2023-11-20T01:20:06.000Z","_content":"\n# RFC\n\nhttps://datatracker.ietf.org/doc/html/rfc4253\n\n# SSH简介\n\n安全外壳协议（Secure Shell Protocol，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中建立安全隧道来实现SSH客户端与服务器之间的连接。SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。\n\n<!--more-->\n\n# SSH数据包基本格式\n\nSSH的数据包加密后分块传输，每次传输的实际包长度都应为密码块大小的整数倍或8\n\n每个加密后的数据包都由如下结构构成\n\n``` C C\nuint32    packet_length;\nbyte      padding_length;\nbyte[n1]  payload; // n1 = packet_length - padding_length - 1\nbyte[n2]  random_padding; // n2 = padding_length\nbyte[m]   mac(Message_Authentication_Code - MAC); // m = mac_length\n```\n\n+ packet_length：数据载荷的长度，不包括`mac`部分和`packet_length`本身。在进行加密协商完成后，传输的`packet_length`也会被加密\n\n+ padding_length：`random_padding`块的大小\n\n+ payload：数据载荷，根绝协商决定被加密或被压缩的方法\n\n+ random padding： 0-255位随机填充\n\n+ mac：信息认证码，用作信息完整性校验\n\n# SSH过程\n\n以下采用一个SSH抓包结果为例，描述SSH链接建立过程：\n\n|=======|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|=======|\n\n|&nbsp;&nbsp;&nbsp;客户端&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;服务端&nbsp;&nbsp;&nbsp;&nbsp;|\n\n|=======|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|=======|\n\n|=======================链接建立=======================|\n\n|1. 三次握手1|----------------------------------------------------------------------------------------->\n\n<----------------------------------------------------------------------------------------|2. 三次握手2|\n\n|3. 三次握手3|----------------------------------------------------------------------------------------->\n\n|=======================协议协商=======================|\n\n<----------------------------------------------------------------------------------------|4. 服务端协议|\n\n|5. 客户端协议|----------------------------------------------------------------------------------------->\n\n|=======================算法协商=======================|\n\n<-------------------------------------------------------------------------------------|6. 服务端算法表|\n\n|7. 客户端算法表|------------------------------------------------------------------------------------>\n\n|=======================密钥交换=======================|\n\n|8. Diffie-Hellman Init|------------------------------------------------------------------------------>\n\n<------------------------------------------------|9. Diffie-Hellman Reply，New Keys，加密包|\n\n|10. New Keys|---------------------------------------------------------------------------------------->\n\n|=======================加密通讯=======================|\n\n## 链接建立\n\n（1）（2）（3）三次握手报文\n\n[TCP三次握手](https://zh.wikipedia.org/zh-hans/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE)\n\n## 协议协商\n\n（4）服务端协议报文\n\nHex内容\n\n> 0x 53 53 48 2d 32 2e 30 2d 4f 70 65 6e 53 53 48 5f 38 2e 30 0d 0a\n\n报文内容\n\n> SSH-2.0-OpenSSH_8.0&lt;CR>&lt;LF>\n\n包括SSH、协议版本（2.0）、软件版本（OpenSSH_8.0）\n\n（5）客户端协议报文\n\nHex内容\n\n> 0x 53 53 48 2d 32 2e 30 2d 6e 73 73 73 68 32 5f 37 2e 30 2e 30 30 33 33 20 4e 65 74 53 61 72 61 6e 67 20 43 6f 6d 70 75 74 65 72 2c 20 49 6e 63 2e 0d 0a\n\n报文内容\n\n> SSH-2.0-nsssh2_7.0.0033 NetSarang Computer, Inc.&lt;CR>&lt;LF>\n\n## 算法协商\n\n在算法协商的过程中，双方会各自发送自己支持的算法列表，最终对以下几个算法达成共识：\n+ kex_algorithms：密钥交换算法\n+ server_host_key_algorithms：公钥算法\n+ encryption_algorithms：加密算法\n+ mac_algorithms：数据完整性算法\n+ compression_algorithms：压缩算法\n+ languages：语言标签（可选）\n+ first_kex_packet_follows：表示是否有猜测数据包\n  \n在达成共识的过程中，基本以客户端中的算法排序优先匹配\n\n（6）服务端算法表报文\n\n+ packet_length：0x00 00 04 14（1044）\n+ padding_length：0x05（5）\n+ SSH_MSG_SERVICE_ACCEPT：0x14（`SSH_MSG_KEXINIT`）\n+ Cookie：0xd7 86 29 66...(16Byte)\n+ kex_algorithms length：下方算法表长度\n+ kex_algorithms list：算法表（字符串表示，逗号分隔）\n+ server_host_key_algorithms length：下方算法表长度\n+ server_host_key_algorithms list：算法表（字符串表示，逗号分隔）\n+ encryption_algorithms_client_to_server length：下方算法表长度\n+ encryption_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）\n+ encryption_algorithms_server_to_client length：下方算法表长度\n+ encryption_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）\n+ mac_algorithms_client_to_server length：下方算法表长度\n+ mac_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）\n+ mac_algorithms_server_to_client length：下方算法表长度\n+ mac_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）\n+ compression_algorithms_client_to_server length：下方算法表长度\n+ compression_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）\n+ compression_algorithms_server_to_client length：下方算法表长度\n+ compression_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）\n+ languages_client_to_server length：下方算法表长度\n+ languages_client_to_server list：算法表（字符串表示，逗号分隔）\n+ languages_server_to_client length：下方算法表长度\n+ languages_server_to_client list：算法表（字符串表示，逗号分隔）\n+ first_kex_packet_follows：0x00\n+ Reserved：0x00 00 00 00\n+ Padding：0x00 00 00 00 00（`padding_length`长度）\n\n（7）客户端算法表报文\n\n与服务端算法表格式相同\n\n## 密钥交换\n\n通过双方协商，决定采用Elliptic Curve Diffie-Hellman方式进行密钥交换\n\n（8）客户端Diffie-Hellman Init\n+ packet_length：0x00 00 00 2c\n+ padding_length：0x06\n+ MSG：0x1e（Elliptic Curve Diffie-Hellman Key Exchange Init）\n+ 客户端公钥长度：0x00 00 00 20（32）\n+ 客户端公钥：0xd1 d9 b8 6c 84 67 55 0f ca 84 6e 8b 0e 67 25 27 6b 50 ae ed a4 6d dc 0b 73 4c 15 ad e9 f5 51 66\n+ Padding：0x91 f0 e8 0c f4 9b\n\n（9）服务端Diffie-Hellman Reply，New Keys，加密包\n\n服务端的回复包含三部分内容，Key Exchange Reply、New Keys、 加密包\n\n其中，Key Exchange Reply包括了密钥交换的结果\n\n+ packet_length：0x00 00 03 5c\n+ padding_length：0x08\n+ MSG：0x1f（Elliptic Curve Diffie-Hellman Key Exchange Reply）\n+ Host Key Length：0x00 00 01 97\n+ Host Key Type Length：0x00 00 00 07\n+ Host Key Type：0x73 73 68 2d 72 73 21（ssh-rsa）\n+ Multi Precision Integer Length：0x00 00 00 03\n+ RSA public exponent (e)：0x01 00 01\n+ Multi Precision Integer Length：0x00 00 01 81\n+ RSA Modulus (N)：0x00 be 1b 4b 73 9d f8 37 0e 33...\n+ ECDH server's ephemeral public key length：0x00 00 00 20\n+ ECDH server's ephemeral public key (Q_S)：0x3a 2e 62 f6 ee...\n+ KEX H signature length：0x00 00 01 8f\n+ KEX H signature ：0x00 00 00 07 73 73 68 2d 72 73 61 00 00 01 80 a0...\n+ Padding：0x00 00 00 00 00 00 00 00\n\nNew Keys表示密钥交换完成，此后的内容都需要使用新密钥处理\n\n+ packet_length：0x00 00 00 0c\n+ padding_length：0x0a\n+ MSG：0x15（`SSH_MSG_NEWKEYS`）\n+ Padding：0x00 00 00 00 00 00 00 00 00 00\n\n后续的数据已经被加密，无法查看内容，推测是与客户端进行登录认证的协商\n\n（10）客户端New Keys\n\n客户端的New Keys包与服务端相同，后续客户端发送数据也都被加密处理","source":"_posts/SSH.md","raw":"---\ntitle: SSH握手过程\ndate: 2023-11-20 09:20:06\ncategories: \n- 网络编程\ntags:\n- 网络编程\n- SSH\n---\n\n# RFC\n\nhttps://datatracker.ietf.org/doc/html/rfc4253\n\n# SSH简介\n\n安全外壳协议（Secure Shell Protocol，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中建立安全隧道来实现SSH客户端与服务器之间的连接。SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。\n\n<!--more-->\n\n# SSH数据包基本格式\n\nSSH的数据包加密后分块传输，每次传输的实际包长度都应为密码块大小的整数倍或8\n\n每个加密后的数据包都由如下结构构成\n\n``` C C\nuint32    packet_length;\nbyte      padding_length;\nbyte[n1]  payload; // n1 = packet_length - padding_length - 1\nbyte[n2]  random_padding; // n2 = padding_length\nbyte[m]   mac(Message_Authentication_Code - MAC); // m = mac_length\n```\n\n+ packet_length：数据载荷的长度，不包括`mac`部分和`packet_length`本身。在进行加密协商完成后，传输的`packet_length`也会被加密\n\n+ padding_length：`random_padding`块的大小\n\n+ payload：数据载荷，根绝协商决定被加密或被压缩的方法\n\n+ random padding： 0-255位随机填充\n\n+ mac：信息认证码，用作信息完整性校验\n\n# SSH过程\n\n以下采用一个SSH抓包结果为例，描述SSH链接建立过程：\n\n|=======|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|=======|\n\n|&nbsp;&nbsp;&nbsp;客户端&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;服务端&nbsp;&nbsp;&nbsp;&nbsp;|\n\n|=======|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|=======|\n\n|=======================链接建立=======================|\n\n|1. 三次握手1|----------------------------------------------------------------------------------------->\n\n<----------------------------------------------------------------------------------------|2. 三次握手2|\n\n|3. 三次握手3|----------------------------------------------------------------------------------------->\n\n|=======================协议协商=======================|\n\n<----------------------------------------------------------------------------------------|4. 服务端协议|\n\n|5. 客户端协议|----------------------------------------------------------------------------------------->\n\n|=======================算法协商=======================|\n\n<-------------------------------------------------------------------------------------|6. 服务端算法表|\n\n|7. 客户端算法表|------------------------------------------------------------------------------------>\n\n|=======================密钥交换=======================|\n\n|8. Diffie-Hellman Init|------------------------------------------------------------------------------>\n\n<------------------------------------------------|9. Diffie-Hellman Reply，New Keys，加密包|\n\n|10. New Keys|---------------------------------------------------------------------------------------->\n\n|=======================加密通讯=======================|\n\n## 链接建立\n\n（1）（2）（3）三次握手报文\n\n[TCP三次握手](https://zh.wikipedia.org/zh-hans/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE)\n\n## 协议协商\n\n（4）服务端协议报文\n\nHex内容\n\n> 0x 53 53 48 2d 32 2e 30 2d 4f 70 65 6e 53 53 48 5f 38 2e 30 0d 0a\n\n报文内容\n\n> SSH-2.0-OpenSSH_8.0&lt;CR>&lt;LF>\n\n包括SSH、协议版本（2.0）、软件版本（OpenSSH_8.0）\n\n（5）客户端协议报文\n\nHex内容\n\n> 0x 53 53 48 2d 32 2e 30 2d 6e 73 73 73 68 32 5f 37 2e 30 2e 30 30 33 33 20 4e 65 74 53 61 72 61 6e 67 20 43 6f 6d 70 75 74 65 72 2c 20 49 6e 63 2e 0d 0a\n\n报文内容\n\n> SSH-2.0-nsssh2_7.0.0033 NetSarang Computer, Inc.&lt;CR>&lt;LF>\n\n## 算法协商\n\n在算法协商的过程中，双方会各自发送自己支持的算法列表，最终对以下几个算法达成共识：\n+ kex_algorithms：密钥交换算法\n+ server_host_key_algorithms：公钥算法\n+ encryption_algorithms：加密算法\n+ mac_algorithms：数据完整性算法\n+ compression_algorithms：压缩算法\n+ languages：语言标签（可选）\n+ first_kex_packet_follows：表示是否有猜测数据包\n  \n在达成共识的过程中，基本以客户端中的算法排序优先匹配\n\n（6）服务端算法表报文\n\n+ packet_length：0x00 00 04 14（1044）\n+ padding_length：0x05（5）\n+ SSH_MSG_SERVICE_ACCEPT：0x14（`SSH_MSG_KEXINIT`）\n+ Cookie：0xd7 86 29 66...(16Byte)\n+ kex_algorithms length：下方算法表长度\n+ kex_algorithms list：算法表（字符串表示，逗号分隔）\n+ server_host_key_algorithms length：下方算法表长度\n+ server_host_key_algorithms list：算法表（字符串表示，逗号分隔）\n+ encryption_algorithms_client_to_server length：下方算法表长度\n+ encryption_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）\n+ encryption_algorithms_server_to_client length：下方算法表长度\n+ encryption_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）\n+ mac_algorithms_client_to_server length：下方算法表长度\n+ mac_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）\n+ mac_algorithms_server_to_client length：下方算法表长度\n+ mac_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）\n+ compression_algorithms_client_to_server length：下方算法表长度\n+ compression_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）\n+ compression_algorithms_server_to_client length：下方算法表长度\n+ compression_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）\n+ languages_client_to_server length：下方算法表长度\n+ languages_client_to_server list：算法表（字符串表示，逗号分隔）\n+ languages_server_to_client length：下方算法表长度\n+ languages_server_to_client list：算法表（字符串表示，逗号分隔）\n+ first_kex_packet_follows：0x00\n+ Reserved：0x00 00 00 00\n+ Padding：0x00 00 00 00 00（`padding_length`长度）\n\n（7）客户端算法表报文\n\n与服务端算法表格式相同\n\n## 密钥交换\n\n通过双方协商，决定采用Elliptic Curve Diffie-Hellman方式进行密钥交换\n\n（8）客户端Diffie-Hellman Init\n+ packet_length：0x00 00 00 2c\n+ padding_length：0x06\n+ MSG：0x1e（Elliptic Curve Diffie-Hellman Key Exchange Init）\n+ 客户端公钥长度：0x00 00 00 20（32）\n+ 客户端公钥：0xd1 d9 b8 6c 84 67 55 0f ca 84 6e 8b 0e 67 25 27 6b 50 ae ed a4 6d dc 0b 73 4c 15 ad e9 f5 51 66\n+ Padding：0x91 f0 e8 0c f4 9b\n\n（9）服务端Diffie-Hellman Reply，New Keys，加密包\n\n服务端的回复包含三部分内容，Key Exchange Reply、New Keys、 加密包\n\n其中，Key Exchange Reply包括了密钥交换的结果\n\n+ packet_length：0x00 00 03 5c\n+ padding_length：0x08\n+ MSG：0x1f（Elliptic Curve Diffie-Hellman Key Exchange Reply）\n+ Host Key Length：0x00 00 01 97\n+ Host Key Type Length：0x00 00 00 07\n+ Host Key Type：0x73 73 68 2d 72 73 21（ssh-rsa）\n+ Multi Precision Integer Length：0x00 00 00 03\n+ RSA public exponent (e)：0x01 00 01\n+ Multi Precision Integer Length：0x00 00 01 81\n+ RSA Modulus (N)：0x00 be 1b 4b 73 9d f8 37 0e 33...\n+ ECDH server's ephemeral public key length：0x00 00 00 20\n+ ECDH server's ephemeral public key (Q_S)：0x3a 2e 62 f6 ee...\n+ KEX H signature length：0x00 00 01 8f\n+ KEX H signature ：0x00 00 00 07 73 73 68 2d 72 73 61 00 00 01 80 a0...\n+ Padding：0x00 00 00 00 00 00 00 00\n\nNew Keys表示密钥交换完成，此后的内容都需要使用新密钥处理\n\n+ packet_length：0x00 00 00 0c\n+ padding_length：0x0a\n+ MSG：0x15（`SSH_MSG_NEWKEYS`）\n+ Padding：0x00 00 00 00 00 00 00 00 00 00\n\n后续的数据已经被加密，无法查看内容，推测是与客户端进行登录认证的协商\n\n（10）客户端New Keys\n\n客户端的New Keys包与服务端相同，后续客户端发送数据也都被加密处理","slug":"SSH","published":1,"updated":"2023-11-22T05:53:14.954Z","_id":"clp6pdezg0001ucticl5mhmkv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"RFC\"><a href=\"#RFC\" class=\"headerlink\" title=\"RFC\"></a>RFC</h1><p><a href=\"https://datatracker.ietf.org/doc/html/rfc4253\">https://datatracker.ietf.org/doc/html/rfc4253</a></p>\n<h1 id=\"SSH简介\"><a href=\"#SSH简介\" class=\"headerlink\" title=\"SSH简介\"></a>SSH简介</h1><p>安全外壳协议（Secure Shell Protocol，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中建立安全隧道来实现SSH客户端与服务器之间的连接。SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"SSH数据包基本格式\"><a href=\"#SSH数据包基本格式\" class=\"headerlink\" title=\"SSH数据包基本格式\"></a>SSH数据包基本格式</h1><p>SSH的数据包加密后分块传输，每次传输的实际包长度都应为密码块大小的整数倍或8</p>\n<p>每个加密后的数据包都由如下结构构成</p>\n<figure class=\"highlight c\"><figcaption><span>C</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uint32    packet_length;</span><br><span class=\"line\">byte      padding_length;</span><br><span class=\"line\">byte[n1]  payload; <span class=\"comment\">// n1 = packet_length - padding_length - 1</span></span><br><span class=\"line\">byte[n2]  random_padding; <span class=\"comment\">// n2 = padding_length</span></span><br><span class=\"line\">byte[m]   mac(Message_Authentication_Code - MAC); <span class=\"comment\">// m = mac_length</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>packet_length：数据载荷的长度，不包括<code>mac</code>部分和<code>packet_length</code>本身。在进行加密协商完成后，传输的<code>packet_length</code>也会被加密</p>\n</li>\n<li><p>padding_length：<code>random_padding</code>块的大小</p>\n</li>\n<li><p>payload：数据载荷，根绝协商决定被加密或被压缩的方法</p>\n</li>\n<li><p>random padding： 0-255位随机填充</p>\n</li>\n<li><p>mac：信息认证码，用作信息完整性校验</p>\n</li>\n</ul>\n<h1 id=\"SSH过程\"><a href=\"#SSH过程\" class=\"headerlink\" title=\"SSH过程\"></a>SSH过程</h1><p>以下采用一个SSH抓包结果为例，描述SSH链接建立过程：</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<p>|&nbsp;&nbsp;&nbsp;客户端&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;服务端&nbsp;&nbsp;&nbsp;&nbsp;|</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;链接建立&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<p>|1. 三次握手1|—————————————————————————————–&gt;</p>\n<p>&lt;—————————————————————————————-|2. 三次握手2|</p>\n<p>|3. 三次握手3|—————————————————————————————–&gt;</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;协议协商&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<p>&lt;—————————————————————————————-|4. 服务端协议|</p>\n<p>|5. 客户端协议|—————————————————————————————–&gt;</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;算法协商&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<p>&lt;————————————————————————————-|6. 服务端算法表|</p>\n<p>|7. 客户端算法表|————————————————————————————&gt;</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;密钥交换&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<p>|8. Diffie-Hellman Init|——————————————————————————&gt;</p>\n<p>&lt;————————————————|9. Diffie-Hellman Reply，New Keys，加密包|</p>\n<p>|10. New Keys|—————————————————————————————-&gt;</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;加密通讯&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<h2 id=\"链接建立\"><a href=\"#链接建立\" class=\"headerlink\" title=\"链接建立\"></a>链接建立</h2><p>（1）（2）（3）三次握手报文</p>\n<p><a href=\"https://zh.wikipedia.org/zh-hans/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\">TCP三次握手</a></p>\n<h2 id=\"协议协商\"><a href=\"#协议协商\" class=\"headerlink\" title=\"协议协商\"></a>协议协商</h2><p>（4）服务端协议报文</p>\n<p>Hex内容</p>\n<blockquote>\n<p>0x 53 53 48 2d 32 2e 30 2d 4f 70 65 6e 53 53 48 5f 38 2e 30 0d 0a</p>\n</blockquote>\n<p>报文内容</p>\n<blockquote>\n<p>SSH-2.0-OpenSSH_8.0&lt;CR&gt;&lt;LF&gt;</p>\n</blockquote>\n<p>包括SSH、协议版本（2.0）、软件版本（OpenSSH_8.0）</p>\n<p>（5）客户端协议报文</p>\n<p>Hex内容</p>\n<blockquote>\n<p>0x 53 53 48 2d 32 2e 30 2d 6e 73 73 73 68 32 5f 37 2e 30 2e 30 30 33 33 20 4e 65 74 53 61 72 61 6e 67 20 43 6f 6d 70 75 74 65 72 2c 20 49 6e 63 2e 0d 0a</p>\n</blockquote>\n<p>报文内容</p>\n<blockquote>\n<p>SSH-2.0-nsssh2_7.0.0033 NetSarang Computer, Inc.&lt;CR&gt;&lt;LF&gt;</p>\n</blockquote>\n<h2 id=\"算法协商\"><a href=\"#算法协商\" class=\"headerlink\" title=\"算法协商\"></a>算法协商</h2><p>在算法协商的过程中，双方会各自发送自己支持的算法列表，最终对以下几个算法达成共识：</p>\n<ul>\n<li>kex_algorithms：密钥交换算法</li>\n<li>server_host_key_algorithms：公钥算法</li>\n<li>encryption_algorithms：加密算法</li>\n<li>mac_algorithms：数据完整性算法</li>\n<li>compression_algorithms：压缩算法</li>\n<li>languages：语言标签（可选）</li>\n<li>first_kex_packet_follows：表示是否有猜测数据包</li>\n</ul>\n<p>在达成共识的过程中，基本以客户端中的算法排序优先匹配</p>\n<p>（6）服务端算法表报文</p>\n<ul>\n<li>packet_length：0x00 00 04 14（1044）</li>\n<li>padding_length：0x05（5）</li>\n<li>SSH_MSG_SERVICE_ACCEPT：0x14（<code>SSH_MSG_KEXINIT</code>）</li>\n<li>Cookie：0xd7 86 29 66…(16Byte)</li>\n<li>kex_algorithms length：下方算法表长度</li>\n<li>kex_algorithms list：算法表（字符串表示，逗号分隔）</li>\n<li>server_host_key_algorithms length：下方算法表长度</li>\n<li>server_host_key_algorithms list：算法表（字符串表示，逗号分隔）</li>\n<li>encryption_algorithms_client_to_server length：下方算法表长度</li>\n<li>encryption_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）</li>\n<li>encryption_algorithms_server_to_client length：下方算法表长度</li>\n<li>encryption_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）</li>\n<li>mac_algorithms_client_to_server length：下方算法表长度</li>\n<li>mac_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）</li>\n<li>mac_algorithms_server_to_client length：下方算法表长度</li>\n<li>mac_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）</li>\n<li>compression_algorithms_client_to_server length：下方算法表长度</li>\n<li>compression_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）</li>\n<li>compression_algorithms_server_to_client length：下方算法表长度</li>\n<li>compression_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）</li>\n<li>languages_client_to_server length：下方算法表长度</li>\n<li>languages_client_to_server list：算法表（字符串表示，逗号分隔）</li>\n<li>languages_server_to_client length：下方算法表长度</li>\n<li>languages_server_to_client list：算法表（字符串表示，逗号分隔）</li>\n<li>first_kex_packet_follows：0x00</li>\n<li>Reserved：0x00 00 00 00</li>\n<li>Padding：0x00 00 00 00 00（<code>padding_length</code>长度）</li>\n</ul>\n<p>（7）客户端算法表报文</p>\n<p>与服务端算法表格式相同</p>\n<h2 id=\"密钥交换\"><a href=\"#密钥交换\" class=\"headerlink\" title=\"密钥交换\"></a>密钥交换</h2><p>通过双方协商，决定采用Elliptic Curve Diffie-Hellman方式进行密钥交换</p>\n<p>（8）客户端Diffie-Hellman Init</p>\n<ul>\n<li>packet_length：0x00 00 00 2c</li>\n<li>padding_length：0x06</li>\n<li>MSG：0x1e（Elliptic Curve Diffie-Hellman Key Exchange Init）</li>\n<li>客户端公钥长度：0x00 00 00 20（32）</li>\n<li>客户端公钥：0xd1 d9 b8 6c 84 67 55 0f ca 84 6e 8b 0e 67 25 27 6b 50 ae ed a4 6d dc 0b 73 4c 15 ad e9 f5 51 66</li>\n<li>Padding：0x91 f0 e8 0c f4 9b</li>\n</ul>\n<p>（9）服务端Diffie-Hellman Reply，New Keys，加密包</p>\n<p>服务端的回复包含三部分内容，Key Exchange Reply、New Keys、 加密包</p>\n<p>其中，Key Exchange Reply包括了密钥交换的结果</p>\n<ul>\n<li>packet_length：0x00 00 03 5c</li>\n<li>padding_length：0x08</li>\n<li>MSG：0x1f（Elliptic Curve Diffie-Hellman Key Exchange Reply）</li>\n<li>Host Key Length：0x00 00 01 97</li>\n<li>Host Key Type Length：0x00 00 00 07</li>\n<li>Host Key Type：0x73 73 68 2d 72 73 21（ssh-rsa）</li>\n<li>Multi Precision Integer Length：0x00 00 00 03</li>\n<li>RSA public exponent (e)：0x01 00 01</li>\n<li>Multi Precision Integer Length：0x00 00 01 81</li>\n<li>RSA Modulus (N)：0x00 be 1b 4b 73 9d f8 37 0e 33…</li>\n<li>ECDH server’s ephemeral public key length：0x00 00 00 20</li>\n<li>ECDH server’s ephemeral public key (Q_S)：0x3a 2e 62 f6 ee…</li>\n<li>KEX H signature length：0x00 00 01 8f</li>\n<li>KEX H signature ：0x00 00 00 07 73 73 68 2d 72 73 61 00 00 01 80 a0…</li>\n<li>Padding：0x00 00 00 00 00 00 00 00</li>\n</ul>\n<p>New Keys表示密钥交换完成，此后的内容都需要使用新密钥处理</p>\n<ul>\n<li>packet_length：0x00 00 00 0c</li>\n<li>padding_length：0x0a</li>\n<li>MSG：0x15（<code>SSH_MSG_NEWKEYS</code>）</li>\n<li>Padding：0x00 00 00 00 00 00 00 00 00 00</li>\n</ul>\n<p>后续的数据已经被加密，无法查看内容，推测是与客户端进行登录认证的协商</p>\n<p>（10）客户端New Keys</p>\n<p>客户端的New Keys包与服务端相同，后续客户端发送数据也都被加密处理</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"RFC\"><a href=\"#RFC\" class=\"headerlink\" title=\"RFC\"></a>RFC</h1><p><a href=\"https://datatracker.ietf.org/doc/html/rfc4253\">https://datatracker.ietf.org/doc/html/rfc4253</a></p>\n<h1 id=\"SSH简介\"><a href=\"#SSH简介\" class=\"headerlink\" title=\"SSH简介\"></a>SSH简介</h1><p>安全外壳协议（Secure Shell Protocol，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中建立安全隧道来实现SSH客户端与服务器之间的连接。SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。</p>","more":"<h1 id=\"SSH数据包基本格式\"><a href=\"#SSH数据包基本格式\" class=\"headerlink\" title=\"SSH数据包基本格式\"></a>SSH数据包基本格式</h1><p>SSH的数据包加密后分块传输，每次传输的实际包长度都应为密码块大小的整数倍或8</p>\n<p>每个加密后的数据包都由如下结构构成</p>\n<figure class=\"highlight c\"><figcaption><span>C</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uint32    packet_length;</span><br><span class=\"line\">byte      padding_length;</span><br><span class=\"line\">byte[n1]  payload; <span class=\"comment\">// n1 = packet_length - padding_length - 1</span></span><br><span class=\"line\">byte[n2]  random_padding; <span class=\"comment\">// n2 = padding_length</span></span><br><span class=\"line\">byte[m]   mac(Message_Authentication_Code - MAC); <span class=\"comment\">// m = mac_length</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>packet_length：数据载荷的长度，不包括<code>mac</code>部分和<code>packet_length</code>本身。在进行加密协商完成后，传输的<code>packet_length</code>也会被加密</p>\n</li>\n<li><p>padding_length：<code>random_padding</code>块的大小</p>\n</li>\n<li><p>payload：数据载荷，根绝协商决定被加密或被压缩的方法</p>\n</li>\n<li><p>random padding： 0-255位随机填充</p>\n</li>\n<li><p>mac：信息认证码，用作信息完整性校验</p>\n</li>\n</ul>\n<h1 id=\"SSH过程\"><a href=\"#SSH过程\" class=\"headerlink\" title=\"SSH过程\"></a>SSH过程</h1><p>以下采用一个SSH抓包结果为例，描述SSH链接建立过程：</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<p>|&nbsp;&nbsp;&nbsp;客户端&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;服务端&nbsp;&nbsp;&nbsp;&nbsp;|</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;链接建立&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<p>|1. 三次握手1|—————————————————————————————–&gt;</p>\n<p>&lt;—————————————————————————————-|2. 三次握手2|</p>\n<p>|3. 三次握手3|—————————————————————————————–&gt;</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;协议协商&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<p>&lt;—————————————————————————————-|4. 服务端协议|</p>\n<p>|5. 客户端协议|—————————————————————————————–&gt;</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;算法协商&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<p>&lt;————————————————————————————-|6. 服务端算法表|</p>\n<p>|7. 客户端算法表|————————————————————————————&gt;</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;密钥交换&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<p>|8. Diffie-Hellman Init|——————————————————————————&gt;</p>\n<p>&lt;————————————————|9. Diffie-Hellman Reply，New Keys，加密包|</p>\n<p>|10. New Keys|—————————————————————————————-&gt;</p>\n<p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;加密通讯&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p>\n<h2 id=\"链接建立\"><a href=\"#链接建立\" class=\"headerlink\" title=\"链接建立\"></a>链接建立</h2><p>（1）（2）（3）三次握手报文</p>\n<p><a href=\"https://zh.wikipedia.org/zh-hans/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\">TCP三次握手</a></p>\n<h2 id=\"协议协商\"><a href=\"#协议协商\" class=\"headerlink\" title=\"协议协商\"></a>协议协商</h2><p>（4）服务端协议报文</p>\n<p>Hex内容</p>\n<blockquote>\n<p>0x 53 53 48 2d 32 2e 30 2d 4f 70 65 6e 53 53 48 5f 38 2e 30 0d 0a</p>\n</blockquote>\n<p>报文内容</p>\n<blockquote>\n<p>SSH-2.0-OpenSSH_8.0&lt;CR&gt;&lt;LF&gt;</p>\n</blockquote>\n<p>包括SSH、协议版本（2.0）、软件版本（OpenSSH_8.0）</p>\n<p>（5）客户端协议报文</p>\n<p>Hex内容</p>\n<blockquote>\n<p>0x 53 53 48 2d 32 2e 30 2d 6e 73 73 73 68 32 5f 37 2e 30 2e 30 30 33 33 20 4e 65 74 53 61 72 61 6e 67 20 43 6f 6d 70 75 74 65 72 2c 20 49 6e 63 2e 0d 0a</p>\n</blockquote>\n<p>报文内容</p>\n<blockquote>\n<p>SSH-2.0-nsssh2_7.0.0033 NetSarang Computer, Inc.&lt;CR&gt;&lt;LF&gt;</p>\n</blockquote>\n<h2 id=\"算法协商\"><a href=\"#算法协商\" class=\"headerlink\" title=\"算法协商\"></a>算法协商</h2><p>在算法协商的过程中，双方会各自发送自己支持的算法列表，最终对以下几个算法达成共识：</p>\n<ul>\n<li>kex_algorithms：密钥交换算法</li>\n<li>server_host_key_algorithms：公钥算法</li>\n<li>encryption_algorithms：加密算法</li>\n<li>mac_algorithms：数据完整性算法</li>\n<li>compression_algorithms：压缩算法</li>\n<li>languages：语言标签（可选）</li>\n<li>first_kex_packet_follows：表示是否有猜测数据包</li>\n</ul>\n<p>在达成共识的过程中，基本以客户端中的算法排序优先匹配</p>\n<p>（6）服务端算法表报文</p>\n<ul>\n<li>packet_length：0x00 00 04 14（1044）</li>\n<li>padding_length：0x05（5）</li>\n<li>SSH_MSG_SERVICE_ACCEPT：0x14（<code>SSH_MSG_KEXINIT</code>）</li>\n<li>Cookie：0xd7 86 29 66…(16Byte)</li>\n<li>kex_algorithms length：下方算法表长度</li>\n<li>kex_algorithms list：算法表（字符串表示，逗号分隔）</li>\n<li>server_host_key_algorithms length：下方算法表长度</li>\n<li>server_host_key_algorithms list：算法表（字符串表示，逗号分隔）</li>\n<li>encryption_algorithms_client_to_server length：下方算法表长度</li>\n<li>encryption_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）</li>\n<li>encryption_algorithms_server_to_client length：下方算法表长度</li>\n<li>encryption_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）</li>\n<li>mac_algorithms_client_to_server length：下方算法表长度</li>\n<li>mac_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）</li>\n<li>mac_algorithms_server_to_client length：下方算法表长度</li>\n<li>mac_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）</li>\n<li>compression_algorithms_client_to_server length：下方算法表长度</li>\n<li>compression_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）</li>\n<li>compression_algorithms_server_to_client length：下方算法表长度</li>\n<li>compression_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）</li>\n<li>languages_client_to_server length：下方算法表长度</li>\n<li>languages_client_to_server list：算法表（字符串表示，逗号分隔）</li>\n<li>languages_server_to_client length：下方算法表长度</li>\n<li>languages_server_to_client list：算法表（字符串表示，逗号分隔）</li>\n<li>first_kex_packet_follows：0x00</li>\n<li>Reserved：0x00 00 00 00</li>\n<li>Padding：0x00 00 00 00 00（<code>padding_length</code>长度）</li>\n</ul>\n<p>（7）客户端算法表报文</p>\n<p>与服务端算法表格式相同</p>\n<h2 id=\"密钥交换\"><a href=\"#密钥交换\" class=\"headerlink\" title=\"密钥交换\"></a>密钥交换</h2><p>通过双方协商，决定采用Elliptic Curve Diffie-Hellman方式进行密钥交换</p>\n<p>（8）客户端Diffie-Hellman Init</p>\n<ul>\n<li>packet_length：0x00 00 00 2c</li>\n<li>padding_length：0x06</li>\n<li>MSG：0x1e（Elliptic Curve Diffie-Hellman Key Exchange Init）</li>\n<li>客户端公钥长度：0x00 00 00 20（32）</li>\n<li>客户端公钥：0xd1 d9 b8 6c 84 67 55 0f ca 84 6e 8b 0e 67 25 27 6b 50 ae ed a4 6d dc 0b 73 4c 15 ad e9 f5 51 66</li>\n<li>Padding：0x91 f0 e8 0c f4 9b</li>\n</ul>\n<p>（9）服务端Diffie-Hellman Reply，New Keys，加密包</p>\n<p>服务端的回复包含三部分内容，Key Exchange Reply、New Keys、 加密包</p>\n<p>其中，Key Exchange Reply包括了密钥交换的结果</p>\n<ul>\n<li>packet_length：0x00 00 03 5c</li>\n<li>padding_length：0x08</li>\n<li>MSG：0x1f（Elliptic Curve Diffie-Hellman Key Exchange Reply）</li>\n<li>Host Key Length：0x00 00 01 97</li>\n<li>Host Key Type Length：0x00 00 00 07</li>\n<li>Host Key Type：0x73 73 68 2d 72 73 21（ssh-rsa）</li>\n<li>Multi Precision Integer Length：0x00 00 00 03</li>\n<li>RSA public exponent (e)：0x01 00 01</li>\n<li>Multi Precision Integer Length：0x00 00 01 81</li>\n<li>RSA Modulus (N)：0x00 be 1b 4b 73 9d f8 37 0e 33…</li>\n<li>ECDH server’s ephemeral public key length：0x00 00 00 20</li>\n<li>ECDH server’s ephemeral public key (Q_S)：0x3a 2e 62 f6 ee…</li>\n<li>KEX H signature length：0x00 00 01 8f</li>\n<li>KEX H signature ：0x00 00 00 07 73 73 68 2d 72 73 61 00 00 01 80 a0…</li>\n<li>Padding：0x00 00 00 00 00 00 00 00</li>\n</ul>\n<p>New Keys表示密钥交换完成，此后的内容都需要使用新密钥处理</p>\n<ul>\n<li>packet_length：0x00 00 00 0c</li>\n<li>padding_length：0x0a</li>\n<li>MSG：0x15（<code>SSH_MSG_NEWKEYS</code>）</li>\n<li>Padding：0x00 00 00 00 00 00 00 00 00 00</li>\n</ul>\n<p>后续的数据已经被加密，无法查看内容，推测是与客户端进行登录认证的协商</p>\n<p>（10）客户端New Keys</p>\n<p>客户端的New Keys包与服务端相同，后续客户端发送数据也都被加密处理</p>"},{"title":"在Windows中使用Linux——WSL","date":"2023-11-17T08:36:34.000Z","_content":"\nhttps://learn.microsoft.com/zh-cn/windows/wsl/\n\n<!--more-->","source":"_posts/WSL.md","raw":"---\ntitle: 在Windows中使用Linux——WSL\ndate: 2023-11-17 16:36:34\ncategories: \n- 豆知识\ntags:\n- 豆知识\n- 环境配置\n- Linux\n---\n\nhttps://learn.microsoft.com/zh-cn/windows/wsl/\n\n<!--more-->","slug":"WSL","published":1,"updated":"2023-11-22T03:25:53.042Z","_id":"clp6pdezi0002uctiap0q0kv9","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/\">https://learn.microsoft.com/zh-cn/windows/wsl/</a></p>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<p><a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/\">https://learn.microsoft.com/zh-cn/windows/wsl/</a></p>","more":""},{"title":"golang与串口设备在项目中的运用","date":"2023-11-22T03:06:28.000Z","_content":"\n# 需求简述\n\n硬件设备使用485Modbus通讯，需使用golang编写采集程序，将数据采集至平台。\n\n<!--more-->\n\n# 方案简述\n\n使用串口服务器将485Modbus通讯转为TCPModbus，并将串口服务器设置为TCPserver。\n\n使用golang编写采集器，定期向串口服务器建立TCP链接，采集数据。\n\n# 技术点与实现\n\n## 点表\n\n通过```struct```实现点位表\n\n这里使用Raw表示原始点表数据，和通讯协议一一对应\n\n后续可将Raw结构封装至更高层的业务结构，用来实现业务数据的表示、嵌套能其他功能\n\n``` golang golang\ntype StructMcuRaw struct {\n\tVer               [4]uint8 `json:\"ver\"`                                                                               // 软件版本[4]char\n\tId                uint16   `json:\"id\"`                                                                                // 通信箱id\n\tTargetAngle       uint16   `json:\"targetAngle\" IEC104:\"yc\" IEC104Name:\"子阵目标角度\" IEC104Unit:\"°\" IEC104Factor:\"0.1\"` // 对整个子阵设置目标角度\n\tInitSnowDepth     uint16   `json:\"initSnowDepth\" IEC104:\"yx\" IEC104Name:\"标定初始雪深标志\"`                              // 标定初始雪深标志\n\tPrecipitationType uint16   `json:\"precipitationType\"`                                                                 // 降水类型\n}\n```\n\n## 读取二进制数据\n\n通过```binary```包，可以实现从buffer中读取数据向```struct```赋值\n\n``` golang golang\nfunc (p *StructMcuRaw) MCUFromByte(res *bytes.Buffer) {\n\t// 软件版本[4]char\n\tfor x := 0; x < 4; x++ {\n\t\tbinary.Read(res, binary.BigEndian, p.Ver[x])\n\t}\n\t// 通信箱id\n\tbinary.Read(res, binary.BigEndian, &p.Id)\n\t// 对整个子阵设置目标角度\n\tbinary.Read(res, binary.BigEndian, &p.TargetAngle)\n\t// 标定初始雪深标志\n\tbinary.Read(res, binary.BigEndian, &p.InitSnowDepth)\n\t// 降水类型\n\tbinary.Read(res, binary.BigEndian, &p.PrecipitationType)\n}\n```\n\n## 封装为query\n\n在本项目中，query指对单个设备的采集方法\n\n将数据读取封装成query方法，包括TCP采集过程、日志记录、包格式处理等\n\n``` golang golang\nfunc MCUQuery(conn *net.Conn, reader *bufio.Reader, buffer *[]byte, cb *rs.StructCommBox, mcu *rs.StructMcu) error {\n\t// 查询地址\n\taddInt, err := strconv.Atoi(mcu.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// 包编号\n\ttcpSeq := TcpSeq()\n\tvar query = []byte{\n\t\tuint8(tcpSeq / 0x100), uint8(tcpSeq % 0x100), // 编号\n\t\t0x00, 0x00, 0x00, 0x06, // 长度\n\t\tbyte(addInt), 0x03, 0x00, 0xa0, 0x00, 0x29} // 指令\n\t(*conn).SetWriteDeadline(time.Now().Add(rs.QUERY_DEFAULT_TIMEOUT))\n\t_, err = (*conn).Write(query)\n\tif err != nil {\n\t\tlog.Log(true, cb.IpAddr, cb.Port, []byte{})\n\t\treturn err\n\t}\n\t// 日志\n\tlog.Log(true, cb.IpAddr, cb.Port, query)\n\t// 接收\n\t(*conn).SetReadDeadline(time.Now().Add(rs.QUERY_DEFAULT_TIMEOUT))\n\tn, err := (*reader).Read(*buffer)\n\tif err != nil {\n\t\tlog.Log(false, cb.IpAddr, cb.Port, []byte{})\n\t\treturn err\n\t}\n\t// 日志\n\tlog.Log(false, cb.IpAddr, cb.Port, (*buffer)[:n])\n\t// 解析\n\tres := bytes.NewBuffer(*buffer)\n\t// TCP头\n\tvar tcpHeader rs.StructTCPHeader\n\ttcpHeader.TCPHeaderFromByte(res)\n\tif tcpHeader.Seq != tcpSeq {\n\t\treturn errors.New(\"TCP异常\")\n\t}\n\tif tcpHeader.Len != 85 {\n\t\treturn errors.New(\"TCP长度异常\")\n\t}\n\t// modbus头\n\tvar mbHeader rs.StructMudbusHeader\n\tmbHeader.MudbusHeaderFromByte(res)\n\t// mcu内容\n\tmcu.Raw.MCUFromByte(res)\n\tmcu.VUpdate = true // 标记更新\n\treturn nil\n}\n```\n\n## 封装为采集过程\n\n最后需要将所有的采集query放置在统一的采集过程中\n\n在一次采集过程中，创建一条TCP链接，完成所有采集动作，最后断开链接\n\n``` golang golang\nfunc Collect(cb *rs.StructCommBox) {\n\t// 记录网络占用\n\tNetCh <- true\n\tdefer func() {\n\t\t<-NetCh\n\t}()\n\t// 初始化采集标识\n\teraseFlag(cb)\n\t// 采集结束后更新时标\n\tdefer func() {\n\t\tupdateTs(cb)\n\t}()\n\t// 建链\n\tconn, err := net.DialTimeout(\"tcp\", cb.IpAddr+\":\"+cb.Port, rs.QUERY_DEFAULT_TIMEOUT)\n\tif err != nil {\n\t\tlog.Log(true, cb.IpAddr, cb.Port, []byte{})\n\t\treturn\n\t}\n\tcb.VUpdate = true\n\tdefer conn.Close()\n\t// 读写缓存\n\treadBuf := bufio.NewReader(conn)\n\tbuffer := make([]byte, 256)\n\t// 按mcu查询\n\tfor x := 0; x < len(cb.Mcus); x++ {\n\t\t// 切换MCU预留时间, 提高成功率\n\t\ttime.Sleep(rs.QUERY_MCU_INTERVAL)\n\t\t// 查mcu信息\n\t\tmcu := cb.Mcus[x]\n\t\terr = cmd.MCUQuery(&conn, readBuf, &buffer, cb, mcu)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\t// 分次查跟踪器信息\n\t\tfor y := 0; y < mcu.TracerNum; {\n\t\t\t// 切换Tracer预留时间, 提高成功率\n\t\t\ttime.Sleep(rs.QUERY_TRACER_INTERVAL)\n\t\t\t// 查询长度\n\t\t\ttracerLen := rs.QUERY_TRACER_COUNT\n\t\t\tif mcu.TracerNum-y < rs.QUERY_TRACER_COUNT {\n\t\t\t\ttracerLen = mcu.TracerNum - y\n\t\t\t}\n\t\t\terr = cmd.TracerQuery(&conn, readBuf, &buffer, cb, mcu, y, tracerLen)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\ty += tracerLen\n\t\t}\n\t}\n}\n```\n\n# 总结\n\n使用golang+串口服务器进行串口通讯，非常的简单、直观，易于开发维护。\n\n在本次项目实践中，由于golang提供了方便的并发编程与控制机制，高负载环境下的性能也得到了充分保障。","source":"_posts/golangSerial.md","raw":"---\ntitle: golang与串口设备在项目中的运用\ndate: 2023-11-22 11:06:28\ncategories: \n- 项目实践\ntags:\n- 项目实践\n- 网络编程\n- golang\n- 串口通讯\n---\n\n# 需求简述\n\n硬件设备使用485Modbus通讯，需使用golang编写采集程序，将数据采集至平台。\n\n<!--more-->\n\n# 方案简述\n\n使用串口服务器将485Modbus通讯转为TCPModbus，并将串口服务器设置为TCPserver。\n\n使用golang编写采集器，定期向串口服务器建立TCP链接，采集数据。\n\n# 技术点与实现\n\n## 点表\n\n通过```struct```实现点位表\n\n这里使用Raw表示原始点表数据，和通讯协议一一对应\n\n后续可将Raw结构封装至更高层的业务结构，用来实现业务数据的表示、嵌套能其他功能\n\n``` golang golang\ntype StructMcuRaw struct {\n\tVer               [4]uint8 `json:\"ver\"`                                                                               // 软件版本[4]char\n\tId                uint16   `json:\"id\"`                                                                                // 通信箱id\n\tTargetAngle       uint16   `json:\"targetAngle\" IEC104:\"yc\" IEC104Name:\"子阵目标角度\" IEC104Unit:\"°\" IEC104Factor:\"0.1\"` // 对整个子阵设置目标角度\n\tInitSnowDepth     uint16   `json:\"initSnowDepth\" IEC104:\"yx\" IEC104Name:\"标定初始雪深标志\"`                              // 标定初始雪深标志\n\tPrecipitationType uint16   `json:\"precipitationType\"`                                                                 // 降水类型\n}\n```\n\n## 读取二进制数据\n\n通过```binary```包，可以实现从buffer中读取数据向```struct```赋值\n\n``` golang golang\nfunc (p *StructMcuRaw) MCUFromByte(res *bytes.Buffer) {\n\t// 软件版本[4]char\n\tfor x := 0; x < 4; x++ {\n\t\tbinary.Read(res, binary.BigEndian, p.Ver[x])\n\t}\n\t// 通信箱id\n\tbinary.Read(res, binary.BigEndian, &p.Id)\n\t// 对整个子阵设置目标角度\n\tbinary.Read(res, binary.BigEndian, &p.TargetAngle)\n\t// 标定初始雪深标志\n\tbinary.Read(res, binary.BigEndian, &p.InitSnowDepth)\n\t// 降水类型\n\tbinary.Read(res, binary.BigEndian, &p.PrecipitationType)\n}\n```\n\n## 封装为query\n\n在本项目中，query指对单个设备的采集方法\n\n将数据读取封装成query方法，包括TCP采集过程、日志记录、包格式处理等\n\n``` golang golang\nfunc MCUQuery(conn *net.Conn, reader *bufio.Reader, buffer *[]byte, cb *rs.StructCommBox, mcu *rs.StructMcu) error {\n\t// 查询地址\n\taddInt, err := strconv.Atoi(mcu.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// 包编号\n\ttcpSeq := TcpSeq()\n\tvar query = []byte{\n\t\tuint8(tcpSeq / 0x100), uint8(tcpSeq % 0x100), // 编号\n\t\t0x00, 0x00, 0x00, 0x06, // 长度\n\t\tbyte(addInt), 0x03, 0x00, 0xa0, 0x00, 0x29} // 指令\n\t(*conn).SetWriteDeadline(time.Now().Add(rs.QUERY_DEFAULT_TIMEOUT))\n\t_, err = (*conn).Write(query)\n\tif err != nil {\n\t\tlog.Log(true, cb.IpAddr, cb.Port, []byte{})\n\t\treturn err\n\t}\n\t// 日志\n\tlog.Log(true, cb.IpAddr, cb.Port, query)\n\t// 接收\n\t(*conn).SetReadDeadline(time.Now().Add(rs.QUERY_DEFAULT_TIMEOUT))\n\tn, err := (*reader).Read(*buffer)\n\tif err != nil {\n\t\tlog.Log(false, cb.IpAddr, cb.Port, []byte{})\n\t\treturn err\n\t}\n\t// 日志\n\tlog.Log(false, cb.IpAddr, cb.Port, (*buffer)[:n])\n\t// 解析\n\tres := bytes.NewBuffer(*buffer)\n\t// TCP头\n\tvar tcpHeader rs.StructTCPHeader\n\ttcpHeader.TCPHeaderFromByte(res)\n\tif tcpHeader.Seq != tcpSeq {\n\t\treturn errors.New(\"TCP异常\")\n\t}\n\tif tcpHeader.Len != 85 {\n\t\treturn errors.New(\"TCP长度异常\")\n\t}\n\t// modbus头\n\tvar mbHeader rs.StructMudbusHeader\n\tmbHeader.MudbusHeaderFromByte(res)\n\t// mcu内容\n\tmcu.Raw.MCUFromByte(res)\n\tmcu.VUpdate = true // 标记更新\n\treturn nil\n}\n```\n\n## 封装为采集过程\n\n最后需要将所有的采集query放置在统一的采集过程中\n\n在一次采集过程中，创建一条TCP链接，完成所有采集动作，最后断开链接\n\n``` golang golang\nfunc Collect(cb *rs.StructCommBox) {\n\t// 记录网络占用\n\tNetCh <- true\n\tdefer func() {\n\t\t<-NetCh\n\t}()\n\t// 初始化采集标识\n\teraseFlag(cb)\n\t// 采集结束后更新时标\n\tdefer func() {\n\t\tupdateTs(cb)\n\t}()\n\t// 建链\n\tconn, err := net.DialTimeout(\"tcp\", cb.IpAddr+\":\"+cb.Port, rs.QUERY_DEFAULT_TIMEOUT)\n\tif err != nil {\n\t\tlog.Log(true, cb.IpAddr, cb.Port, []byte{})\n\t\treturn\n\t}\n\tcb.VUpdate = true\n\tdefer conn.Close()\n\t// 读写缓存\n\treadBuf := bufio.NewReader(conn)\n\tbuffer := make([]byte, 256)\n\t// 按mcu查询\n\tfor x := 0; x < len(cb.Mcus); x++ {\n\t\t// 切换MCU预留时间, 提高成功率\n\t\ttime.Sleep(rs.QUERY_MCU_INTERVAL)\n\t\t// 查mcu信息\n\t\tmcu := cb.Mcus[x]\n\t\terr = cmd.MCUQuery(&conn, readBuf, &buffer, cb, mcu)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\t// 分次查跟踪器信息\n\t\tfor y := 0; y < mcu.TracerNum; {\n\t\t\t// 切换Tracer预留时间, 提高成功率\n\t\t\ttime.Sleep(rs.QUERY_TRACER_INTERVAL)\n\t\t\t// 查询长度\n\t\t\ttracerLen := rs.QUERY_TRACER_COUNT\n\t\t\tif mcu.TracerNum-y < rs.QUERY_TRACER_COUNT {\n\t\t\t\ttracerLen = mcu.TracerNum - y\n\t\t\t}\n\t\t\terr = cmd.TracerQuery(&conn, readBuf, &buffer, cb, mcu, y, tracerLen)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\ty += tracerLen\n\t\t}\n\t}\n}\n```\n\n# 总结\n\n使用golang+串口服务器进行串口通讯，非常的简单、直观，易于开发维护。\n\n在本次项目实践中，由于golang提供了方便的并发编程与控制机制，高负载环境下的性能也得到了充分保障。","slug":"golangSerial","published":1,"updated":"2023-11-22T06:09:14.125Z","_id":"clp96nwtj0000zkti0s2k9fku","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"需求简述\"><a href=\"#需求简述\" class=\"headerlink\" title=\"需求简述\"></a>需求简述</h1><p>硬件设备使用485Modbus通讯，需使用golang编写采集程序，将数据采集至平台。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"方案简述\"><a href=\"#方案简述\" class=\"headerlink\" title=\"方案简述\"></a>方案简述</h1><p>使用串口服务器将485Modbus通讯转为TCPModbus，并将串口服务器设置为TCPserver。</p>\n<p>使用golang编写采集器，定期向串口服务器建立TCP链接，采集数据。</p>\n<h1 id=\"技术点与实现\"><a href=\"#技术点与实现\" class=\"headerlink\" title=\"技术点与实现\"></a>技术点与实现</h1><h2 id=\"点表\"><a href=\"#点表\" class=\"headerlink\" title=\"点表\"></a>点表</h2><p>通过<code>struct</code>实现点位表</p>\n<p>这里使用Raw表示原始点表数据，和通讯协议一一对应</p>\n<p>后续可将Raw结构封装至更高层的业务结构，用来实现业务数据的表示、嵌套能其他功能</p>\n<figure class=\"highlight golang\"><figcaption><span>golang</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> StructMcuRaw <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tVer               [<span class=\"number\">4</span>]<span class=\"type\">uint8</span> <span class=\"string\">`json:&quot;ver&quot;`</span>                                                                               <span class=\"comment\">// 软件版本[4]char</span></span><br><span class=\"line\">\tId                <span class=\"type\">uint16</span>   <span class=\"string\">`json:&quot;id&quot;`</span>                                                                                <span class=\"comment\">// 通信箱id</span></span><br><span class=\"line\">\tTargetAngle       <span class=\"type\">uint16</span>   <span class=\"string\">`json:&quot;targetAngle&quot; IEC104:&quot;yc&quot; IEC104Name:&quot;子阵目标角度&quot; IEC104Unit:&quot;°&quot; IEC104Factor:&quot;0.1&quot;`</span> <span class=\"comment\">// 对整个子阵设置目标角度</span></span><br><span class=\"line\">\tInitSnowDepth     <span class=\"type\">uint16</span>   <span class=\"string\">`json:&quot;initSnowDepth&quot; IEC104:&quot;yx&quot; IEC104Name:&quot;标定初始雪深标志&quot;`</span>                              <span class=\"comment\">// 标定初始雪深标志</span></span><br><span class=\"line\">\tPrecipitationType <span class=\"type\">uint16</span>   <span class=\"string\">`json:&quot;precipitationType&quot;`</span>                                                                 <span class=\"comment\">// 降水类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"读取二进制数据\"><a href=\"#读取二进制数据\" class=\"headerlink\" title=\"读取二进制数据\"></a>读取二进制数据</h2><p>通过<code>binary</code>包，可以实现从buffer中读取数据向<code>struct</code>赋值</p>\n<figure class=\"highlight golang\"><figcaption><span>golang</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *StructMcuRaw)</span></span> MCUFromByte(res *bytes.Buffer) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 软件版本[4]char</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">4</span>; x++ &#123;</span><br><span class=\"line\">\t\tbinary.Read(res, binary.BigEndian, p.Ver[x])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 通信箱id</span></span><br><span class=\"line\">\tbinary.Read(res, binary.BigEndian, &amp;p.Id)</span><br><span class=\"line\">\t<span class=\"comment\">// 对整个子阵设置目标角度</span></span><br><span class=\"line\">\tbinary.Read(res, binary.BigEndian, &amp;p.TargetAngle)</span><br><span class=\"line\">\t<span class=\"comment\">// 标定初始雪深标志</span></span><br><span class=\"line\">\tbinary.Read(res, binary.BigEndian, &amp;p.InitSnowDepth)</span><br><span class=\"line\">\t<span class=\"comment\">// 降水类型</span></span><br><span class=\"line\">\tbinary.Read(res, binary.BigEndian, &amp;p.PrecipitationType)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"封装为query\"><a href=\"#封装为query\" class=\"headerlink\" title=\"封装为query\"></a>封装为query</h2><p>在本项目中，query指对单个设备的采集方法</p>\n<p>将数据读取封装成query方法，包括TCP采集过程、日志记录、包格式处理等</p>\n<figure class=\"highlight golang\"><figcaption><span>golang</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MCUQuery</span><span class=\"params\">(conn *net.Conn, reader *bufio.Reader, buffer *[]<span class=\"type\">byte</span>, cb *rs.StructCommBox, mcu *rs.StructMcu)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 查询地址</span></span><br><span class=\"line\">\taddInt, err := strconv.Atoi(mcu.Addr)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 包编号</span></span><br><span class=\"line\">\ttcpSeq := TcpSeq()</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> query = []<span class=\"type\">byte</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">uint8</span>(tcpSeq / <span class=\"number\">0x100</span>), <span class=\"type\">uint8</span>(tcpSeq % <span class=\"number\">0x100</span>), <span class=\"comment\">// 编号</span></span><br><span class=\"line\">\t\t<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x06</span>, <span class=\"comment\">// 长度</span></span><br><span class=\"line\">\t\t<span class=\"type\">byte</span>(addInt), <span class=\"number\">0x03</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xa0</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x29</span>&#125; <span class=\"comment\">// 指令</span></span><br><span class=\"line\">\t(*conn).SetWriteDeadline(time.Now().Add(rs.QUERY_DEFAULT_TIMEOUT))</span><br><span class=\"line\">\t_, err = (*conn).Write(query)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Log(<span class=\"literal\">true</span>, cb.IpAddr, cb.Port, []<span class=\"type\">byte</span>&#123;&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 日志</span></span><br><span class=\"line\">\tlog.Log(<span class=\"literal\">true</span>, cb.IpAddr, cb.Port, query)</span><br><span class=\"line\">\t<span class=\"comment\">// 接收</span></span><br><span class=\"line\">\t(*conn).SetReadDeadline(time.Now().Add(rs.QUERY_DEFAULT_TIMEOUT))</span><br><span class=\"line\">\tn, err := (*reader).Read(*buffer)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Log(<span class=\"literal\">false</span>, cb.IpAddr, cb.Port, []<span class=\"type\">byte</span>&#123;&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 日志</span></span><br><span class=\"line\">\tlog.Log(<span class=\"literal\">false</span>, cb.IpAddr, cb.Port, (*buffer)[:n])</span><br><span class=\"line\">\t<span class=\"comment\">// 解析</span></span><br><span class=\"line\">\tres := bytes.NewBuffer(*buffer)</span><br><span class=\"line\">\t<span class=\"comment\">// TCP头</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> tcpHeader rs.StructTCPHeader</span><br><span class=\"line\">\ttcpHeader.TCPHeaderFromByte(res)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> tcpHeader.Seq != tcpSeq &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">&quot;TCP异常&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> tcpHeader.Len != <span class=\"number\">85</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">&quot;TCP长度异常&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// modbus头</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mbHeader rs.StructMudbusHeader</span><br><span class=\"line\">\tmbHeader.MudbusHeaderFromByte(res)</span><br><span class=\"line\">\t<span class=\"comment\">// mcu内容</span></span><br><span class=\"line\">\tmcu.Raw.MCUFromByte(res)</span><br><span class=\"line\">\tmcu.VUpdate = <span class=\"literal\">true</span> <span class=\"comment\">// 标记更新</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"封装为采集过程\"><a href=\"#封装为采集过程\" class=\"headerlink\" title=\"封装为采集过程\"></a>封装为采集过程</h2><p>最后需要将所有的采集query放置在统一的采集过程中</p>\n<p>在一次采集过程中，创建一条TCP链接，完成所有采集动作，最后断开链接</p>\n<figure class=\"highlight golang\"><figcaption><span>golang</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Collect</span><span class=\"params\">(cb *rs.StructCommBox)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 记录网络占用</span></span><br><span class=\"line\">\tNetCh &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t&lt;-NetCh</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化采集标识</span></span><br><span class=\"line\">\teraseFlag(cb)</span><br><span class=\"line\">\t<span class=\"comment\">// 采集结束后更新时标</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tupdateTs(cb)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"comment\">// 建链</span></span><br><span class=\"line\">\tconn, err := net.DialTimeout(<span class=\"string\">&quot;tcp&quot;</span>, cb.IpAddr+<span class=\"string\">&quot;:&quot;</span>+cb.Port, rs.QUERY_DEFAULT_TIMEOUT)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Log(<span class=\"literal\">true</span>, cb.IpAddr, cb.Port, []<span class=\"type\">byte</span>&#123;&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcb.VUpdate = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">\t<span class=\"comment\">// 读写缓存</span></span><br><span class=\"line\">\treadBuf := bufio.NewReader(conn)</span><br><span class=\"line\">\tbuffer := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">256</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 按mcu查询</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"built_in\">len</span>(cb.Mcus); x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 切换MCU预留时间, 提高成功率</span></span><br><span class=\"line\">\t\ttime.Sleep(rs.QUERY_MCU_INTERVAL)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 查mcu信息</span></span><br><span class=\"line\">\t\tmcu := cb.Mcus[x]</span><br><span class=\"line\">\t\terr = cmd.MCUQuery(&amp;conn, readBuf, &amp;buffer, cb, mcu)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 分次查跟踪器信息</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; mcu.TracerNum; &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 切换Tracer预留时间, 提高成功率</span></span><br><span class=\"line\">\t\t\ttime.Sleep(rs.QUERY_TRACER_INTERVAL)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 查询长度</span></span><br><span class=\"line\">\t\t\ttracerLen := rs.QUERY_TRACER_COUNT</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> mcu.TracerNum-y &lt; rs.QUERY_TRACER_COUNT &#123;</span><br><span class=\"line\">\t\t\t\ttracerLen = mcu.TracerNum - y</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\terr = cmd.TracerQuery(&amp;conn, readBuf, &amp;buffer, cb, mcu, y, tracerLen)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ty += tracerLen</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>使用golang+串口服务器进行串口通讯，非常的简单、直观，易于开发维护。</p>\n<p>在本次项目实践中，由于golang提供了方便的并发编程与控制机制，高负载环境下的性能也得到了充分保障。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"需求简述\"><a href=\"#需求简述\" class=\"headerlink\" title=\"需求简述\"></a>需求简述</h1><p>硬件设备使用485Modbus通讯，需使用golang编写采集程序，将数据采集至平台。</p>","more":"<h1 id=\"方案简述\"><a href=\"#方案简述\" class=\"headerlink\" title=\"方案简述\"></a>方案简述</h1><p>使用串口服务器将485Modbus通讯转为TCPModbus，并将串口服务器设置为TCPserver。</p>\n<p>使用golang编写采集器，定期向串口服务器建立TCP链接，采集数据。</p>\n<h1 id=\"技术点与实现\"><a href=\"#技术点与实现\" class=\"headerlink\" title=\"技术点与实现\"></a>技术点与实现</h1><h2 id=\"点表\"><a href=\"#点表\" class=\"headerlink\" title=\"点表\"></a>点表</h2><p>通过<code>struct</code>实现点位表</p>\n<p>这里使用Raw表示原始点表数据，和通讯协议一一对应</p>\n<p>后续可将Raw结构封装至更高层的业务结构，用来实现业务数据的表示、嵌套能其他功能</p>\n<figure class=\"highlight golang\"><figcaption><span>golang</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> StructMcuRaw <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tVer               [<span class=\"number\">4</span>]<span class=\"type\">uint8</span> <span class=\"string\">`json:&quot;ver&quot;`</span>                                                                               <span class=\"comment\">// 软件版本[4]char</span></span><br><span class=\"line\">\tId                <span class=\"type\">uint16</span>   <span class=\"string\">`json:&quot;id&quot;`</span>                                                                                <span class=\"comment\">// 通信箱id</span></span><br><span class=\"line\">\tTargetAngle       <span class=\"type\">uint16</span>   <span class=\"string\">`json:&quot;targetAngle&quot; IEC104:&quot;yc&quot; IEC104Name:&quot;子阵目标角度&quot; IEC104Unit:&quot;°&quot; IEC104Factor:&quot;0.1&quot;`</span> <span class=\"comment\">// 对整个子阵设置目标角度</span></span><br><span class=\"line\">\tInitSnowDepth     <span class=\"type\">uint16</span>   <span class=\"string\">`json:&quot;initSnowDepth&quot; IEC104:&quot;yx&quot; IEC104Name:&quot;标定初始雪深标志&quot;`</span>                              <span class=\"comment\">// 标定初始雪深标志</span></span><br><span class=\"line\">\tPrecipitationType <span class=\"type\">uint16</span>   <span class=\"string\">`json:&quot;precipitationType&quot;`</span>                                                                 <span class=\"comment\">// 降水类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"读取二进制数据\"><a href=\"#读取二进制数据\" class=\"headerlink\" title=\"读取二进制数据\"></a>读取二进制数据</h2><p>通过<code>binary</code>包，可以实现从buffer中读取数据向<code>struct</code>赋值</p>\n<figure class=\"highlight golang\"><figcaption><span>golang</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *StructMcuRaw)</span></span> MCUFromByte(res *bytes.Buffer) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 软件版本[4]char</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">4</span>; x++ &#123;</span><br><span class=\"line\">\t\tbinary.Read(res, binary.BigEndian, p.Ver[x])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 通信箱id</span></span><br><span class=\"line\">\tbinary.Read(res, binary.BigEndian, &amp;p.Id)</span><br><span class=\"line\">\t<span class=\"comment\">// 对整个子阵设置目标角度</span></span><br><span class=\"line\">\tbinary.Read(res, binary.BigEndian, &amp;p.TargetAngle)</span><br><span class=\"line\">\t<span class=\"comment\">// 标定初始雪深标志</span></span><br><span class=\"line\">\tbinary.Read(res, binary.BigEndian, &amp;p.InitSnowDepth)</span><br><span class=\"line\">\t<span class=\"comment\">// 降水类型</span></span><br><span class=\"line\">\tbinary.Read(res, binary.BigEndian, &amp;p.PrecipitationType)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"封装为query\"><a href=\"#封装为query\" class=\"headerlink\" title=\"封装为query\"></a>封装为query</h2><p>在本项目中，query指对单个设备的采集方法</p>\n<p>将数据读取封装成query方法，包括TCP采集过程、日志记录、包格式处理等</p>\n<figure class=\"highlight golang\"><figcaption><span>golang</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MCUQuery</span><span class=\"params\">(conn *net.Conn, reader *bufio.Reader, buffer *[]<span class=\"type\">byte</span>, cb *rs.StructCommBox, mcu *rs.StructMcu)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 查询地址</span></span><br><span class=\"line\">\taddInt, err := strconv.Atoi(mcu.Addr)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 包编号</span></span><br><span class=\"line\">\ttcpSeq := TcpSeq()</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> query = []<span class=\"type\">byte</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">uint8</span>(tcpSeq / <span class=\"number\">0x100</span>), <span class=\"type\">uint8</span>(tcpSeq % <span class=\"number\">0x100</span>), <span class=\"comment\">// 编号</span></span><br><span class=\"line\">\t\t<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x06</span>, <span class=\"comment\">// 长度</span></span><br><span class=\"line\">\t\t<span class=\"type\">byte</span>(addInt), <span class=\"number\">0x03</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xa0</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x29</span>&#125; <span class=\"comment\">// 指令</span></span><br><span class=\"line\">\t(*conn).SetWriteDeadline(time.Now().Add(rs.QUERY_DEFAULT_TIMEOUT))</span><br><span class=\"line\">\t_, err = (*conn).Write(query)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Log(<span class=\"literal\">true</span>, cb.IpAddr, cb.Port, []<span class=\"type\">byte</span>&#123;&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 日志</span></span><br><span class=\"line\">\tlog.Log(<span class=\"literal\">true</span>, cb.IpAddr, cb.Port, query)</span><br><span class=\"line\">\t<span class=\"comment\">// 接收</span></span><br><span class=\"line\">\t(*conn).SetReadDeadline(time.Now().Add(rs.QUERY_DEFAULT_TIMEOUT))</span><br><span class=\"line\">\tn, err := (*reader).Read(*buffer)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Log(<span class=\"literal\">false</span>, cb.IpAddr, cb.Port, []<span class=\"type\">byte</span>&#123;&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 日志</span></span><br><span class=\"line\">\tlog.Log(<span class=\"literal\">false</span>, cb.IpAddr, cb.Port, (*buffer)[:n])</span><br><span class=\"line\">\t<span class=\"comment\">// 解析</span></span><br><span class=\"line\">\tres := bytes.NewBuffer(*buffer)</span><br><span class=\"line\">\t<span class=\"comment\">// TCP头</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> tcpHeader rs.StructTCPHeader</span><br><span class=\"line\">\ttcpHeader.TCPHeaderFromByte(res)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> tcpHeader.Seq != tcpSeq &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">&quot;TCP异常&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> tcpHeader.Len != <span class=\"number\">85</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">&quot;TCP长度异常&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// modbus头</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mbHeader rs.StructMudbusHeader</span><br><span class=\"line\">\tmbHeader.MudbusHeaderFromByte(res)</span><br><span class=\"line\">\t<span class=\"comment\">// mcu内容</span></span><br><span class=\"line\">\tmcu.Raw.MCUFromByte(res)</span><br><span class=\"line\">\tmcu.VUpdate = <span class=\"literal\">true</span> <span class=\"comment\">// 标记更新</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"封装为采集过程\"><a href=\"#封装为采集过程\" class=\"headerlink\" title=\"封装为采集过程\"></a>封装为采集过程</h2><p>最后需要将所有的采集query放置在统一的采集过程中</p>\n<p>在一次采集过程中，创建一条TCP链接，完成所有采集动作，最后断开链接</p>\n<figure class=\"highlight golang\"><figcaption><span>golang</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Collect</span><span class=\"params\">(cb *rs.StructCommBox)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 记录网络占用</span></span><br><span class=\"line\">\tNetCh &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t&lt;-NetCh</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化采集标识</span></span><br><span class=\"line\">\teraseFlag(cb)</span><br><span class=\"line\">\t<span class=\"comment\">// 采集结束后更新时标</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tupdateTs(cb)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"comment\">// 建链</span></span><br><span class=\"line\">\tconn, err := net.DialTimeout(<span class=\"string\">&quot;tcp&quot;</span>, cb.IpAddr+<span class=\"string\">&quot;:&quot;</span>+cb.Port, rs.QUERY_DEFAULT_TIMEOUT)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Log(<span class=\"literal\">true</span>, cb.IpAddr, cb.Port, []<span class=\"type\">byte</span>&#123;&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcb.VUpdate = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">\t<span class=\"comment\">// 读写缓存</span></span><br><span class=\"line\">\treadBuf := bufio.NewReader(conn)</span><br><span class=\"line\">\tbuffer := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">256</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 按mcu查询</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"built_in\">len</span>(cb.Mcus); x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 切换MCU预留时间, 提高成功率</span></span><br><span class=\"line\">\t\ttime.Sleep(rs.QUERY_MCU_INTERVAL)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 查mcu信息</span></span><br><span class=\"line\">\t\tmcu := cb.Mcus[x]</span><br><span class=\"line\">\t\terr = cmd.MCUQuery(&amp;conn, readBuf, &amp;buffer, cb, mcu)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 分次查跟踪器信息</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; mcu.TracerNum; &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 切换Tracer预留时间, 提高成功率</span></span><br><span class=\"line\">\t\t\ttime.Sleep(rs.QUERY_TRACER_INTERVAL)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 查询长度</span></span><br><span class=\"line\">\t\t\ttracerLen := rs.QUERY_TRACER_COUNT</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> mcu.TracerNum-y &lt; rs.QUERY_TRACER_COUNT &#123;</span><br><span class=\"line\">\t\t\t\ttracerLen = mcu.TracerNum - y</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\terr = cmd.TracerQuery(&amp;conn, readBuf, &amp;buffer, cb, mcu, y, tracerLen)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ty += tracerLen</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>使用golang+串口服务器进行串口通讯，非常的简单、直观，易于开发维护。</p>\n<p>在本次项目实践中，由于golang提供了方便的并发编程与控制机制，高负载环境下的性能也得到了充分保障。</p>"},{"title":"使用SSH包装Socks5代理","date":"2023-11-22T09:38:25.000Z","_content":"\n# subSocks简介\n\n[subSocks](https://github.com/luyuhuang/subsocks)是[Luyu Hang](https://luyuhuang.tech/)制作的纯golang网络代理软件。\n\n这里是作者本人对此项目的介绍[文档](https://luyuhuang.tech/2020/12/02/subsocks.html)。\n\n<!-- more -->\n\n# 为什么要做SSH包装\n\n因为之前使用v2ray总是被封端口，但是VPS上的22端口始终建在，考虑到SSH协议比较复杂，包括了Shell，SFTP等多种应用。我认为使用SSH协议包装流量可以起到一定的伪装作用，减少端口被封的可能性。\n\nsubSocks项目的代码结构非常漂亮，添加SSH包装非常便捷。\n\n# 实现过程\n\n首先需要了解subSocks的代码结构，Luyu Hang的[文档](https://luyuhuang.tech/2020/12/02/subsocks.html)中描述的非常详细，我只需要实现SSHWarpper和SSHStripper。\n\ngolang已经提供了SSH的官方实现，参考[文档](https://pkg.go.dev/golang.org/x/crypto/ssh)。并且提供了使用SSH进行远程Shell的示例。\n\n之后需要对SSH的[通讯过程](/2023/11/20/SSH.html)，```Session``` ```Channel``` ```Request```等等各种概念有基础的了解。\n\n使用ssh包中的代码，在服务端使用TCP链接，创建SSH服务器，等待客户端链接后获取Channel，将Channel包装为Stripper。\n\n客户端与服务端相似，需要使用TCP链接，向服务端完成握手过程，之后可获得Session，将Session包装成Wrapper。\n\n# 使用\n\n服务端必须配置密钥，可使用自己生成的密钥：\n\n``` toml toml\n[server] # server configuration\n\nprotocol = \"ssh\"\nlisten = \"0.0.0.0:22\"\n\nssh.cert = \"./id_rsa.pub\"\nssh.key = \"./id_rsa\"\n```\n\n客户端只需将协议设置为ssh，其他与subsocks相同:\n\n``` toml toml\n[client] # client configuration\n\nlisten = \"127.0.0.1:1080\"\n\nserver.protocol = \"ssh\"\nserver.address = \"serverIP:22\"\n```\n\n通过抓包验证，握手过程正常，通讯过程与SSH相同，多条链接使用正常，所有数据均经过加密：\n\n![](wireshark.png)\n\n通过观看视频网站验证，视频加载流畅，体验很好。","source":"_posts/SSHInSubSocks.md","raw":"---\ntitle: 使用SSH包装Socks5代理\ndate: 2023-11-22 17:38:25\ncategories: \n- 网络编程\ntags:\n- 网络编程\n- SSH\n---\n\n# subSocks简介\n\n[subSocks](https://github.com/luyuhuang/subsocks)是[Luyu Hang](https://luyuhuang.tech/)制作的纯golang网络代理软件。\n\n这里是作者本人对此项目的介绍[文档](https://luyuhuang.tech/2020/12/02/subsocks.html)。\n\n<!-- more -->\n\n# 为什么要做SSH包装\n\n因为之前使用v2ray总是被封端口，但是VPS上的22端口始终建在，考虑到SSH协议比较复杂，包括了Shell，SFTP等多种应用。我认为使用SSH协议包装流量可以起到一定的伪装作用，减少端口被封的可能性。\n\nsubSocks项目的代码结构非常漂亮，添加SSH包装非常便捷。\n\n# 实现过程\n\n首先需要了解subSocks的代码结构，Luyu Hang的[文档](https://luyuhuang.tech/2020/12/02/subsocks.html)中描述的非常详细，我只需要实现SSHWarpper和SSHStripper。\n\ngolang已经提供了SSH的官方实现，参考[文档](https://pkg.go.dev/golang.org/x/crypto/ssh)。并且提供了使用SSH进行远程Shell的示例。\n\n之后需要对SSH的[通讯过程](/2023/11/20/SSH.html)，```Session``` ```Channel``` ```Request```等等各种概念有基础的了解。\n\n使用ssh包中的代码，在服务端使用TCP链接，创建SSH服务器，等待客户端链接后获取Channel，将Channel包装为Stripper。\n\n客户端与服务端相似，需要使用TCP链接，向服务端完成握手过程，之后可获得Session，将Session包装成Wrapper。\n\n# 使用\n\n服务端必须配置密钥，可使用自己生成的密钥：\n\n``` toml toml\n[server] # server configuration\n\nprotocol = \"ssh\"\nlisten = \"0.0.0.0:22\"\n\nssh.cert = \"./id_rsa.pub\"\nssh.key = \"./id_rsa\"\n```\n\n客户端只需将协议设置为ssh，其他与subsocks相同:\n\n``` toml toml\n[client] # client configuration\n\nlisten = \"127.0.0.1:1080\"\n\nserver.protocol = \"ssh\"\nserver.address = \"serverIP:22\"\n```\n\n通过抓包验证，握手过程正常，通讯过程与SSH相同，多条链接使用正常，所有数据均经过加密：\n\n![](wireshark.png)\n\n通过观看视频网站验证，视频加载流畅，体验很好。","slug":"SSHInSubSocks","published":1,"updated":"2023-11-23T07:28:26.359Z","_id":"clp9knxt90000voti4oqs6zie","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"subSocks简介\"><a href=\"#subSocks简介\" class=\"headerlink\" title=\"subSocks简介\"></a>subSocks简介</h1><p><a href=\"https://github.com/luyuhuang/subsocks\">subSocks</a>是<a href=\"https://luyuhuang.tech/\">Luyu Hang</a>制作的纯golang网络代理软件。</p>\n<p>这里是作者本人对此项目的介绍<a href=\"https://luyuhuang.tech/2020/12/02/subsocks.html\">文档</a>。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"为什么要做SSH包装\"><a href=\"#为什么要做SSH包装\" class=\"headerlink\" title=\"为什么要做SSH包装\"></a>为什么要做SSH包装</h1><p>因为之前使用v2ray总是被封端口，但是VPS上的22端口始终建在，考虑到SSH协议比较复杂，包括了Shell，SFTP等多种应用。我认为使用SSH协议包装流量可以起到一定的伪装作用，减少端口被封的可能性。</p>\n<p>subSocks项目的代码结构非常漂亮，添加SSH包装非常便捷。</p>\n<h1 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h1><p>首先需要了解subSocks的代码结构，Luyu Hang的<a href=\"https://luyuhuang.tech/2020/12/02/subsocks.html\">文档</a>中描述的非常详细，我只需要实现SSHWarpper和SSHStripper。</p>\n<p>golang已经提供了SSH的官方实现，参考<a href=\"https://pkg.go.dev/golang.org/x/crypto/ssh\">文档</a>。并且提供了使用SSH进行远程Shell的示例。</p>\n<p>之后需要对SSH的<a href=\"/2023/11/20/SSH.html\">通讯过程</a>，<code>Session</code> <code>Channel</code> <code>Request</code>等等各种概念有基础的了解。</p>\n<p>使用ssh包中的代码，在服务端使用TCP链接，创建SSH服务器，等待客户端链接后获取Channel，将Channel包装为Stripper。</p>\n<p>客户端与服务端相似，需要使用TCP链接，向服务端完成握手过程，之后可获得Session，将Session包装成Wrapper。</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>服务端必须配置密钥，可使用自己生成的密钥：</p>\n<figure class=\"highlight toml\"><figcaption><span>toml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[server]</span> <span class=\"comment\"># server configuration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">protocol</span> = <span class=\"string\">&quot;ssh&quot;</span></span><br><span class=\"line\"><span class=\"attr\">listen</span> = <span class=\"string\">&quot;0.0.0.0:22&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ssh.cert</span> = <span class=\"string\">&quot;./id_rsa.pub&quot;</span></span><br><span class=\"line\"><span class=\"attr\">ssh.key</span> = <span class=\"string\">&quot;./id_rsa&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>客户端只需将协议设置为ssh，其他与subsocks相同:</p>\n<figure class=\"highlight toml\"><figcaption><span>toml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[client]</span> <span class=\"comment\"># client configuration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">listen</span> = <span class=\"string\">&quot;127.0.0.1:1080&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server.protocol</span> = <span class=\"string\">&quot;ssh&quot;</span></span><br><span class=\"line\"><span class=\"attr\">server.address</span> = <span class=\"string\">&quot;serverIP:22&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过抓包验证，握手过程正常，通讯过程与SSH相同，多条链接使用正常，所有数据均经过加密：</p>\n<p><img src=\"/2023/11/22/SSHInSubSocks/wireshark.png\"></p>\n<p>通过观看视频网站验证，视频加载流畅，体验很好。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"subSocks简介\"><a href=\"#subSocks简介\" class=\"headerlink\" title=\"subSocks简介\"></a>subSocks简介</h1><p><a href=\"https://github.com/luyuhuang/subsocks\">subSocks</a>是<a href=\"https://luyuhuang.tech/\">Luyu Hang</a>制作的纯golang网络代理软件。</p>\n<p>这里是作者本人对此项目的介绍<a href=\"https://luyuhuang.tech/2020/12/02/subsocks.html\">文档</a>。</p>","more":"<h1 id=\"为什么要做SSH包装\"><a href=\"#为什么要做SSH包装\" class=\"headerlink\" title=\"为什么要做SSH包装\"></a>为什么要做SSH包装</h1><p>因为之前使用v2ray总是被封端口，但是VPS上的22端口始终建在，考虑到SSH协议比较复杂，包括了Shell，SFTP等多种应用。我认为使用SSH协议包装流量可以起到一定的伪装作用，减少端口被封的可能性。</p>\n<p>subSocks项目的代码结构非常漂亮，添加SSH包装非常便捷。</p>\n<h1 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h1><p>首先需要了解subSocks的代码结构，Luyu Hang的<a href=\"https://luyuhuang.tech/2020/12/02/subsocks.html\">文档</a>中描述的非常详细，我只需要实现SSHWarpper和SSHStripper。</p>\n<p>golang已经提供了SSH的官方实现，参考<a href=\"https://pkg.go.dev/golang.org/x/crypto/ssh\">文档</a>。并且提供了使用SSH进行远程Shell的示例。</p>\n<p>之后需要对SSH的<a href=\"/2023/11/20/SSH.html\">通讯过程</a>，<code>Session</code> <code>Channel</code> <code>Request</code>等等各种概念有基础的了解。</p>\n<p>使用ssh包中的代码，在服务端使用TCP链接，创建SSH服务器，等待客户端链接后获取Channel，将Channel包装为Stripper。</p>\n<p>客户端与服务端相似，需要使用TCP链接，向服务端完成握手过程，之后可获得Session，将Session包装成Wrapper。</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>服务端必须配置密钥，可使用自己生成的密钥：</p>\n<figure class=\"highlight toml\"><figcaption><span>toml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[server]</span> <span class=\"comment\"># server configuration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">protocol</span> = <span class=\"string\">&quot;ssh&quot;</span></span><br><span class=\"line\"><span class=\"attr\">listen</span> = <span class=\"string\">&quot;0.0.0.0:22&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ssh.cert</span> = <span class=\"string\">&quot;./id_rsa.pub&quot;</span></span><br><span class=\"line\"><span class=\"attr\">ssh.key</span> = <span class=\"string\">&quot;./id_rsa&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>客户端只需将协议设置为ssh，其他与subsocks相同:</p>\n<figure class=\"highlight toml\"><figcaption><span>toml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[client]</span> <span class=\"comment\"># client configuration</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">listen</span> = <span class=\"string\">&quot;127.0.0.1:1080&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server.protocol</span> = <span class=\"string\">&quot;ssh&quot;</span></span><br><span class=\"line\"><span class=\"attr\">server.address</span> = <span class=\"string\">&quot;serverIP:22&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过抓包验证，握手过程正常，通讯过程与SSH相同，多条链接使用正常，所有数据均经过加密：</p>\n<p><img src=\"/2023/11/22/SSHInSubSocks/wireshark.png\"></p>\n<p>通过观看视频网站验证，视频加载流畅，体验很好。</p>"}],"PostAsset":[{"_id":"source/_posts/SSHInSubSocks/wireshark.png","slug":"wireshark.png","post":"clp9knxt90000voti4oqs6zie","modified":1,"renderable":0}],"PostCategory":[{"post_id":"clp6pdezg0001ucticl5mhmkv","category_id":"clp6pdezj0003ucti4ilsa25t","_id":"clp6pdezl0005ucti51dg8i37"},{"post_id":"clp6pdezi0002uctiap0q0kv9","category_id":"clp6pdezl0004ucti3t2ueaju","_id":"clp6pdezm0006ucti1ga8d6l4"},{"post_id":"clp96nwtj0000zkti0s2k9fku","category_id":"clp96xvvy000kzkti1be0gfpj","_id":"clp96xvvz000nzkti094l70g1"},{"post_id":"clp9knxt90000voti4oqs6zie","category_id":"clp6pdezj0003ucti4ilsa25t","_id":"clp9koh1j0003voti4lakaasf"}],"PostTag":[{"post_id":"clp6pdezi0002uctiap0q0kv9","tag_id":"clp92su270000coti507w6um5","_id":"clp92su280001coti2qz74kbm"},{"post_id":"clp6pdezi0002uctiap0q0kv9","tag_id":"clp92ted40002cotidehp08ug","_id":"clp92ted40003coti396z913b"},{"post_id":"clp6pdezg0001ucticl5mhmkv","tag_id":"clp92u73a0004coti56eyc6tr","_id":"clp92u73a0005cotigo1e6ail"},{"post_id":"clp96nwtj0000zkti0s2k9fku","tag_id":"clp96ovd40001zkti4a2l8z4u","_id":"clp96ovd50005zkti4hw0f5zs"},{"post_id":"clp96nwtj0000zkti0s2k9fku","tag_id":"clp96ovd50003zkti4bhr2iqa","_id":"clp96ovd60006zkti2r3v5eov"},{"post_id":"clp96nwtj0000zkti0s2k9fku","tag_id":"clp96ptcm0008zktigjzk0o1s","_id":"clp96ptcn000azkti0omz4345"},{"post_id":"clp6pdezg0001ucticl5mhmkv","tag_id":"clp96ptcm0008zktigjzk0o1s","_id":"clp96qdqd000czktifz3mddjm"},{"post_id":"clp96nwtj0000zkti0s2k9fku","tag_id":"clp96xvvy000lzktih4lfhbk2","_id":"clp96xvvy000mzktic1xbci4q"},{"post_id":"clp6pdezi0002uctiap0q0kv9","tag_id":"clp97cru0000ozkti9xw32bs4","_id":"clp97cru0000pzkti6382gkjp"},{"post_id":"clp9knxt90000voti4oqs6zie","tag_id":"clp96ptcm0008zktigjzk0o1s","_id":"clp9koh1j0001votihhfdcde0"},{"post_id":"clp9knxt90000voti4oqs6zie","tag_id":"clp92u73a0004coti56eyc6tr","_id":"clp9koh1j0002voti88l89qma"}],"Tag":[{"name":"环境配置","_id":"clp92su270000coti507w6um5"},{"name":"Linux","_id":"clp92ted40002cotidehp08ug"},{"name":"SSH","_id":"clp92u73a0004coti56eyc6tr"},{"name":"golang","_id":"clp96ovd40001zkti4a2l8z4u"},{"name":"串口通讯","_id":"clp96ovd50003zkti4bhr2iqa"},{"name":"项目","_id":"clp96ovd50004zkti4mdv0b8p"},{"name":"网络编程","_id":"clp96ptcm0008zktigjzk0o1s"},{"name":"项目实践","_id":"clp96xvvy000lzktih4lfhbk2"},{"name":"豆知识","_id":"clp97cru0000ozkti9xw32bs4"}]}}